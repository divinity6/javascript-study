/**
  * 프로그램 설명문서 주석
  * 2021.04 12 수업
  * 
  *           ===== 글로벌 스코프 =====
  * 
  *   - 글로벌 오브젝트가 글로벌 스코프
  * 
  *   - 오브젝트는
  *   ----> 개발자 관점으로
  *   ----> 오브젝트에 함수와 변수를 작성
  * 
  *   - 스코프는
  *   ----> 식별자 해결을 위한 것으로
  *   ----> 엔진 관점
  * 
  *   - 글로벌 스코프는 최상위 스코프
  *   ----> 함수에서 보면 최종 스코프
  * 
  *   ------------------------------------------------
  * 
  *   - 글로벌 오브젝트가 글로벌 스코프
  *   ----> 이것은 글로벌 오브젝트가 하나만 있기 때문에 스코프도
  *         하나만 있는 것이다.
  * 
  *   - 여기서 오브젝트는 개발자 관점으로 오브젝트에 함수와 변수를 작성한다.
  *   ----> 즉, 함수와 변수를 작성하기 위해서는 오브젝트가 있어야 한다.
  *   ----> 그런데 글로벌 오브젝트는 오브젝트가 없다.
  * 
  *   ----> 물론 오브젝트는 없지만, 호스트 오브젝트 개념으로 윈도우 오브젝트를
  *         글로벌 오브젝트로 사용하긴 한다.
  * 
  *   ----> 하지만 Number오브젝트, String오브젝트와 같이 글로벌 오브젝트가
  *         있는 것은 아니다.
  * 
  *   - 따라서, 함수와 변수를 작성하면 글로벌 오브젝트에 설정되어야 하지만,
  *     호스트 오브젝트 개념으로 윈도우 오브젝트에 설정된다.
  * 
  *   ----> 어찌 되었든, 윈도우 오브젝트든 글로벌 오브젝트든, 함수와 변수는
  *         오브젝트에 작성하게 된다.
  *   
  *   - 또한, 스코프는 식별자 해결을 위한 것으로, 엔진 처리 관점이다.
  *   ----> 엔진이 식별자 해결을 위해서 스코프를 사용하는 것이다.
  * 
  *   - 그리고 개발자는 함수와 변수를 사용하기 위해서 오브젝트를 사용하는 것이다.
  * 
  *   - 글로벌 스코프는 최상위 스코프이다.
  *   ----> 함수에서 보면 최종 스코프가 되는 것이다.
  * 
  *   ----> 예) 함수안에 A함수가 있고, 그안에 B함수, 그안에 C함수가 있을 때,
  *         C함수 안에서 변수를 식별자 해결을 하려고 한다.
  * 
  *   ----> 그런데 없다면 밖으로 나가서 B함수에서 찾는다. B함수 스코프에서 찾는다.
  *   ----> 그리고 B함수 스코프에 없으면 다시, 올라가게 되는데, 최종적으로 올라가는
  *         곳이 최종 스코프라는 것이다.
  * 
  *   - 즉, 식별자 해결을 위해 스코프를 계층적으로 따라 올라가다가 마지막으로
  *     만나는 것이 글로벌 스코프라는 것이다.
  * 
  *   = 이와 같이 함수와 스코프는 뉘앙스가 좀 다르다 =
  * 
  *   - 왜냐하면 오브젝트는 개발자 관점, 스코프는 엔진 관점.
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};

/**
 *          ===== 글로벌 스코프 =====
 * 
 *    - function book(){코드}에서
 *    ----> book 함수가 속한 오브젝트가 없으므로
 *    ----> book 함수가 글로벌 오브젝트에 설정된다
 *    ----> 글로벌 함수
 * 
 *    - var value = 100;
 *    ----> value 변수가 글로벌 오브젝트에 설정
 *    ----> 글로벌 변수
 * 
 *    - 글로벌 오브젝트에 설정된다는 것은 오브젝트 관점
 *    
 *    - 스코프와 식별자 해결 관점은
 *    ----> Scope가 글로벌 스코프라는 것.
 * 
 *    -------------------------------------------------------
 * 
 *    - 글로벌 오브젝트가 하나이므로, 글로벌 스코프나 글로벌 오브젝트가 같다.
 *    ----> 따라서 글로벌 오브젝트 개념으로 접근해도 된다.
 *    
 *    ----> 그러나 스코프와 오브젝트는 목적이 다르다. 그리고 관점이 다른것이다.
 */

 var value = 100;
 function book() {
   var data = 200;
   function getBook(){
     debugger;
     return value;
   }
   getBook();
   return value + data;
 };
 book();


 /**
  *   - 엔진이 처음 코드를 만나게 되면 코드에서 함수 선언문을 찾는다.
  *     그러면 function book()을 만나게 되고,
  *   
  *   ----> book()함수가 속한 오브젝트가 없으므로 이때 function 키워드로 만든
  *         function 오브젝트를 글로벌 오브젝트에 설정한다.
  * 
  *   - 이것을 글로벌 함수라고 한다.
  *   ----> 그런데 글로벌 함수를 전역함수라고 하기도 하지만, 이름이 글로벌 오브젝트
  *         이니깐 글로벌 함수가 시멘틱에 더 어울린다.
  * 
  *   - 그리고 다시돌아와서 value 변수를 초기화한다.
  *   ----> 그러면 value 변수가 글로벌 오브젝트에 설정된다.
  *   ----> 이것을 글로벌 변수라고 하는데, 전역변수라고도 하지만,
  *         약간의 시멘틱 차이는 있다.
  * 
  *   - 이렇게 글로벌 오브젝트에 설정된다는 것은 오브젝트 관점이다.
  *   - 하지만 스코프와 식별자 해결 관점에서 본다면 Scope가 글로벌 스코프라는 것이다.
  * 
  */

 /**
  *           ===== 글로벌 스코프2 =====
  * 
  *   - book();
  *   ----> book 함수를 호출하려면
  *   ----> "오브젝트.book()" 형태로 작성해야 하는데
  *   ----> 오브젝트를 작성하지 않고 함수만 작성
  * 
  *   - 오브젝트를 작성하지 않으면
  *   ----> 글로벌 오브젝트를 "오브젝트"로 간주하여
  *   ----> 글로벌 오브젝트의 book() 함수를 호출
  * 
  *   - 즉, 글로벌 스코프에서 book을 찾아 호출
  * 
  *   -----------------------------------------------
  *   
  *   - book 함수를 호출하려면 "오브젝트.book()" 형태로 작성.
  *   ----> 오브젝트가 없는 함수는 사실 조금 그렇다.
  *   ----> 그런데 오브젝트를 작성하지 않고 함수만 작성했다.
  * 
  *   - 오브젝트를 작성하지 않으면 글로벌 오브젝트를 오브젝트로 간주한다.
  *   ----> 그리고 글로벌 오브젝트의 book()함수를 호출하게 되는 것이다.
  * 
  *   - 사실 글로벌 오브젝트는 실체가 없다. 그러나 호스트 오브젝트 개념으로
  *     윈도우 오브젝트를 사용한다.
  *   ----> 따라서, 윈도우 오브젝트의 book()함수를 호출한다고도 볼 수 있다.
  * 
  *   - book() 함수를 호출하려면 식별자 해결을 해야한다.
  *   ----> 그런데 식별자 해결을 하려면 스코프가 있어야 하는데, 
  *         글로벌 오브젝트에 작성되어 있다.
  *   ----> 따라서, 글로벌 스코프에서 book을 찾아서, 즉, 식별자 해결을 해서
  *         존재하므로 호출하게 된다.
  * 
  *   ==== 여기서 글로벌 오브젝트와 글로벌 스코프는 같다 ====
  * 
  *   = 그러나 오브젝트는 개발자 관점에서 함수와 변수로 접근한 것이고,
  *     스코프는 식별자 해결을 위해서 엔진관점에서 접근한 것이다. =
  * 
  *   - 따라서, 오브젝트와 스코프는 이미 전제가 다른 것이다.
  *   ----> 주변 문맥이 이와 맞아야 한다.
  *   ----> 오브젝트를 사용할 때는 함수, 메소드, 변수가 동반되고
  *   ----> 스코프를 사용할 때는 식별자 해결이 동반되는 것이다.
  */