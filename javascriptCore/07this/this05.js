/**
 * 프로그램 설명문서 주석
 * 2021.06 30 수업
 *
 *
 *           ===== this와 apply() =====
 *
 *  -------------------------------------------------------------------
 *          구분          타입              데이터(값)
 *  -------------------------------------------------------------------
 *          object      Function        호출할 함수 이름
 *
 *          파라미터      object         this로 참조할 오브젝트
 *                       Any           [파라미터]opt
 *
 *          반환          Any           호출된 함수에서 반환한 값
 *  -------------------------------------------------------------------
 *
 *      - getTotal.apply(this, [10, 20])
 *      --> 함수 호출 방법은 call()과 같으며
 *          파라미터가 배열인 것이 다르다.
 *      --> [10,20]을 파라미터 값으로 넘겨준다
 *
 *      - 두 번째 파라미터 수가 유동적일 때 사용
 *        (파라미터가 상황에 따라 2개 ,5개가 들어올 수도 있는 것 )
 *      --> call()은 파라미터 수가 고정일 때 사용
 *
 */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function (value) {
    console.log('--- ' + value + ' ---');
};

/**
 *
 *           ===== this와 arguments =====
 *
 *  1. get.apply( obj , data );
 *  - get() 함수에서 obj를 this로 참조
 *
 *  2. 두 번째 파라미터 [ 4 , 5 , 6 ]을
 *  - arguments를 사용하여 계산
 *  - 파라미터 수가 유동적이므로 arguments가 편리
 *
 *  3. get()의 함수 코드는 바뀌지 않으며
 *  - 넘겨주는 파라미터 값과
 *  - this로 참조할 오브젝트만 변경하면 된다.
 *
 *  4. Array-like 형태
 *  - 이형태는 ES6의 많은 메소드에서 지원을 한다.
 *  --> 예) array와 비슷한 형태를 반복하면서 index 번째의 값을 구하고
 *  --> index를 this로 참조하는 obj의 property에 key로 사용해서 값을 구해서 반복을 한다.
 *
 *  - 그렇다면 apply 메소드가 왜필요햐라는 것
 *  --> 파라미터가 유동적일 때 사용한다.?
 *      이것은 방법이다.
 *      궁극적인 목적은 무엇이냐라는 것.
 *
 *  - 바로 데이터 중심의 접근.
 *    ( 데이터만 바꿔준다면 함수안의 코드는 변경없이 대체할 수가 있다라는 것 )
 *  --> 데이터를 100개를 넣던 this로참조하는 오브젝트의 프로퍼티가 100개든 코드는 바뀌지 않음
 *
 *
 */


log('this와 arguments');
var obj = {0: 10, 1: 20, 2: 30};
var data = [4, 5, 6];

// 파라미터 이름을 작성하지않고 arguments로 파라미터 사용
// 이렇게 인덱스로 값을 구할 수 있음
function get() {
    debugger;
    for (i = 0; i < arguments.length; i++) {
        console.log(arguments[i] + this[i])
    }
}

get.apply(obj, data);
debugger;


/**
 *      우리가 함수에서 값을 구하는 방법은 여러가지가있다
 *      
 *      1. 함수안에 변수를 선언해서 구하기
 *      
 *      2. 파라미터로 값을 받아서 구하기
 *      
 *      3. 다른메소드를 호출해서 값을 구하기
 *      
 *      4. this로 참조해서 값을 구하기
 *      
 *      - 그런데 파라미터값과 this는 외부에서 데이터를 던져주는 것.
 *      --> 변수는 함수안에서 처리하는 것이고,
 *      --> 다른함수를 호출해서 반환받는것은 그함수에서 알아서 할일.
 *
 *      - 그렇다면 apply 메소드에다가 this로 참조할 obj와 파라미터를 넘겨줌으로써
 *        완전하게 get함수에서 값을 구할수있는, 데이터를 처리할 수있는 바탕이 만들어진것
 *
 *      - 바로 이것.
 *        ( call 과 apply 메소드를 호출하는 궁극적인 목적)
 *
 *     - 데이터를 바꿔가면서 함수를 호출하겠다
 *       (그 함수안에서는 데이터에 따라서 그함수의 코드가 움직이게 된다)
 *     --> apply 메소드를 사용하는 목적
 */







