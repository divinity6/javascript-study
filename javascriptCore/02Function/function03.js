/**
  * 프로그램 설명문서 주석
  * 2021.03 24 수업
  * 
  *           ===== function 실행 환경 인식 =====
  * 
  *     - 함수 실행 환경 인식이 필요한 이유는?
  *     ----> 함수가 호출되었을 때
  *     ----> 실행될 환경을 알아야
  *           실행 환경에 맞추어 실행할 수 있기 때문이다
  * 
  *     - 실행 환경 설정 시점
  *     ----> function 키워드를 만나
  *     ----> function 오브젝트를 생성할 때
  * 
  *     - 설정하는 것
  *     ----> 실행 영역(함수가 속한 스코프)
  *     ----> 파라미터, 함수 코드 등
  * 
  *     --------------------------------------------------------
  * 
  *     - 함수 실행 환경을 인식해야 하는 이유는 함수가 호출 되었을 때
  *       실행될 환경을 알아야 실행 환경에 맞추어 실행할 수 있기 때문이다.
  * 
  *     - 실행 환경을 설정하는 시점은 엔진이 function 키워드를 만나
  *       function 오브젝트를 생성할 때 이다.
  *       즉, 정적으로 설정하는 것이다.(이때 스코프도 결정되는 구나)
  * 
  *     - 이때, 설정하는 것은 실행 영역이다. 즉, 함수가 속한 스코프다
  *       따라서 lexical scope 개념이 되는 것이다. 정적 스코프!
  * 
  *     - 이때, 스코프를 딱 한번만 만들면 된다라는 것.
  *       언제인가? function 오브젝트를 생성할 때이다.
  * 
  *       그리고 function 오브젝트를 만드는 것을 내려가면 함수에 대해 더이상
  *       알지 못하기 때문에 파라미터, 함수안에 작성된 함수 코드등을 설정한다.
  * 
  *       이것이 함수가 실행되는 환경이다.
  * 
  *       물론 이외에도 많다.
  * 
  * 
  *     =======================================================================
  *     =======================================================================
  * 
  *           ===== 함수 실행 환경 저장 =====
  * 
  *     - function 오브젝트를 생성하고
  *       바로 실행하지 않으므로
  *       함수가 호출되었을 떄
  *       사용할 수 있도록 환경을 저장해야
  * 
  *     - 어디에 저장?
  *     ----> 생성한 function 오브젝트에 저장
  * 
  *     - 인식한 환경을 function 오브젝트의 내부 프로퍼티에 설정한다
  *     ----> { name : value } 형태로
  * 
  *     --------------------------------------------------------
  *     
  *     - function 오브젝트를 생성하고 바로 실행하지 않는다. 그러니깐
  *       함수가 호출되었을때 사용할 수 있도록 저장해야 한다.
  * 
  *     - 어디에 저장하는지가 포인트이다.
  *       별도의 공간에 저장하는 것이 아니라 생성한 function 오브젝트에 저장한다.
  * 
  *     - 따라서 생성한 function 오브젝트를 읽으면 그안에 함수가 실행될 수 있는
  *       환경이 설정되어 있을 것이다. simple 하다.
  * 
  *     - 거추장스럽게 다른것을 읽을 필요 없이 생성한 function 오브젝트만 읽으면된다라는 것
  * 
  *     - 그런데 생성한 function 오브젝트에 내부프로퍼티로 인식한 환경을 설정한다.
  *       오브젝트니깐 당연히 네임밸류,키밸류 형태 { name : value}
  * 
  *   
  *     =======================================================================
  *     =======================================================================  
  * 
  *           ===== 내부 프로퍼티 =====     
  * 
  *     - 내부 프로퍼티란
  *     ----> 엔진이 내부 처리에 사용하는 프로퍼티
  *     ----> 스펙 표기로 외부에서 사용 불가
  * 
  *     - 스펙 표기
  *     ----> [[]] 형태. 예 : [[Scope]]
  * 
  *     --------------------------------------------------------
  *     
  *     - 여기서 내부 프로퍼티란 엔진이 내부 처리에 사용하는 프로퍼티다.
  *       그래서 이것은 외부에서 사용할 수가 없다.
  * 
  *     - 스펙에 [[]]와 같은 형태로 표기되어 있다. [[Scope]]이런식.
  *       [[Scope]]은 스코프를 뜻하는데 
  *       엔진이 작성한 프로퍼티는 [[프로퍼티 이름]]이런 형식으로 작성한다. 
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};


window.onload = function() {
};
