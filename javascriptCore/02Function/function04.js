/**
  * 프로그램 설명문서 주석
  * 2021.03 25~6 수업
  * 
  *         - 이거는 내일 다시듣고 이해 한번 하자 -
  * 
  *           ===== 내부 프로퍼티 분류 =====
  * 
  *     - 공통 프로퍼티, 선택적 프로퍼티
  * 
  *     - 공통 프로퍼티
  *     ----> 모든 오브젝트에 공통으로 설정되는 프로퍼티
  * 
  *     - 선택적 프로퍼티
  *     ----> 오브젝트에 따라
  *           선택적으로 설정되는 프로퍼티
  * 
  *     ----> 해당되는 오브젝트에만 설정
  * 
  * 
  *    ---------------------------------------------------------------
  * 
  *    - 내부 프로퍼티 분류는 공통 프로퍼티와 선택적 프로퍼티로 분류할 수 있다.
  *      공통 프로퍼티는 모든오브젝트에 공통으로 설정되는 프로퍼티다
  * 
  *    - 여기서 [[모든 오브젝트란 빌트인 오브젝트로 만드는 오브젝트를 뜻한다]]
  * 
  *    - 선택적 프로퍼티란 오브젝트에 따라 선택적으로 설정되는 프로퍼티를 뜻한다.
  *      예) Array 오브젝트에는 설정되지만 String 오브젝트에는 설정되지 않는 그런 프로퍼티
  *      를 뜻한다.
  * 
  *    - 따라서 해당되는 오브젝트에만 설정된다.
  * 
  *    =======================================================================
  *    =======================================================================
  * 
  *           ===== 공통 내부 프로퍼티 =====
  * 
  *     - 모든 오브젝트에 설정
  * 
  *   - 프로퍼티 이름         - 값 형태               - 개요
  * 
  *   - [[Prototype]]        - Object 또는 Null     - 오브젝트의 prototype
  *   - [[Class]]            - String               - 오브젝트 유형 구분
  *   - [[Extensible]]       - Boolean              - 오브젝트에 프로퍼티 추가 가능 여부
  *   - [[Get]]              - any                  - 이름의 프로퍼티 값
  *   - [[GetOwnProperty]]   - 프로퍼티 디스크립터    - 오브젝트 소유의 프로퍼티
  *                                                    디스크립터 속성
  *   - [[GetProperty]]      - 프로퍼티 디스크립터    - 오브젝트의 프로퍼티 디스크립터 속성
  *   - [[Put]]                                     - 프로퍼티 이름으로 프로퍼티 값 설정
  *   - [[CanPut]]           - Boolean              - 값(value) 설정 가능 여부
  *   - [[HasProperty]]      - Boolean              - 프로퍼티의 존재 여부
  *   - [[Delete]]           - Boolean              - 오브젝트에서 프로퍼티 삭제 가능 여부
  *   - [[DefaultValue]]     - any                  - 오브젝트의 디폴트 값
  *   - [[DefinedOwnProperty]] - Boolean            - 프로퍼티 추가, 프로퍼티 값 변경
  *                                                   가능 여부  
  * 
  *   ---------------------------------------------------------------------------------
  * 
  *   - 공통 내부 프로퍼티: 모든 오브젝트에 설정된다.
  * 
  *   - prototype. 이것은 Object 또는 Null을 갖는다.
  *     Object의 프로토타입이다.
  * 
  *   - 그런데 모든 오브젝트라고 하지만 prototype을 가지고 있지않는 오브젝트가 몇개가 있다.
  *     예를 든다면 math 오브젝트는 프로토타입이 없다
  *     따라서 모든이라기 보다는 대부분이라는 것이 더 정확하다.
  * 
  *   - Class. 오브젝트 유형 구분이고 여기서 유형에 따라서 오브젝트가 판별이 된다.
  * 
  *   - Extensible. Extensible은 확장이다. 오브젝트에 프로퍼티 추가가능 여부이다.
  * 
  *   - Get. 이름의 프로퍼티 값. getter라고 보면 되겠다.
  * 
  *   - GetOwnProperty. 오브젝트 소유의 프로퍼티 디스크립터 속성
  * 
  *   - GetProperty. 오브젝트의 프로퍼티 디스크립터 속성
  * 
  *   - Put. 프로퍼티 이름으로 프로퍼티 값 설정
  *   
  *   - CanPut. Can이다. Put을 할수 있냐라는것. 값(value) 설정 가능 여부
  * 
  *   - HasProperty. Has이다. 갖고 있느냐. 프로퍼티의 존재 여부
  * 
  *   - Delete. 오브젝트에서 프로퍼티 삭제 가능 여부
  * 
  *   - DefaultValue. DefaultValue는 오브젝트의 디폴트 값이다.
  * 
  *   - DefinedOwnProperty. 이것은 프로퍼티 추가, 값 변경 여부이다.
  * 
  *   =======================================================================
  *   =======================================================================
  * 
  *           ===== 선택적 내부 프로퍼티 =====
  * 
  *     - 오브젝트에 따라 선택적 결정
  * 
  * 
  *   - 프로퍼티 이름         - 값 형태            - 개요
  * 
  *   - [[PrimitiveValue]]   - 프리미티브 값       - Boolean, Date, Number, String
  *                                                 오브젝트에서 제공     
  *   - [[Construct]]        - Object             - new 연산자로 호출되며 인스턴스 생성
  *   - [[Call]]             - any                - 함수 호출
  *   - [[HasInstance]]      - Boolean            - 지정한 오브젝트로 생성한 인스턴스 여부
  *   - [[Scope]]            - 렉시컬 환경         - Function 오브젝트가 실행되는
  *                                                 렉시컬(정적) 환경
  *   - [[FormalParameters]] - 문자열 리스트       - 호출된 함수의 파라미터 이름 리스트
  *   - [[Code]]             - JS 코드            - 함수에 작성한 JS 코드 설정, 함수가
  *                                                 호출되었을 때 실행
  *   - [[TargetFunction]]   - Object             - Function 오브젝트의 bind()에 생성한
  *                                                 타깃 함수 오브젝트 설정
  *   - [[BoundThis]]        - any                - bind()에 바인딩된 this 오브젝트
  *   - [[BoundArgument]]    - 리스트              - bind()에 바인딩된 아규먼트 리스트
  *   - [[Match]]            - 매치 결과           - 정규 표현식의 매치 결과
  *   - [[ParameterMap]]     - Object             - 아규먼트 오브젝트와 함수의 파라미터 매핑
  * 
  *   --------------------------------------------------------------------------------
  * 
  *   - 오브젝트에 따라 선택적으로 결정
  * 
  *   - PrimitiveValue. Boolean, Date, Number, String오브젝트에서만 제공한다 
  * 
  *   - Construct. new 연산자로 호출되며 인스턴스 생성한다. 
  *                Math 오브젝트 같은 경우에는 constructor가 없어서 해당되지 않는다
  *                그러나 대부분의 오브젝트는 constructor를 가지고 있으므로 인스턴스를
  *                생성할 수 있다.
  * 
  *   - Call. 함수 호출.
  * 
  *   - HasInstance. 인스턴스냐? 지정한 오브젝트로 생성한 여부이다. instanceOf를 연상하면된다
  *   
  *   - Scope. 렉시컬 환경이고 Function 오브젝트가 실행되는 렉시컬 환경.
  *            정적 환경이 여기에 설정된다.
  * 
  *   - FormalParameters. 이것은 호출 된 함수의 파라미터 이름 리스트이다.
  *                       우리가 function 해서 파라미터를 작성한다. 그 파라미터 이름이
  *                       여기에 작성된다.
  * 
  *   - Code. 함수에 작성한 자바스크립트 코드가 설정되고 함수가 호출되면 이것을 해석하고
  *           실행하게 된다. 엔진이 function 키워드를 만나서 function 오브젝트를 만들 때
  *           함수 안에 작성한 코드를 Code에 설정한다라는 것.
  * 
  *           그리고 함수가 호출되면 Code를 불러서 해석도하고 실행도 한다라는 것.
  * 
  *   - TargetFunction,BoundThis,BoundArgument는 bind()메소드에서 사용한다.
  *     bind()메소드는 일반 메소드와 다르게 두단계로 나눠서 실행한다.
  * 
  *     처음에는 bind()메소드로 해서 function 오브젝트를 만들고, 그리고
  *     만든 function 오브젝트를 호출해서 실행시킨다. 따라서
  *     bind()메소드를 실행한 시점에서의 환경을 property에다가 설정한다.
  * 
  *   - TargetFunction. 은 Function 오브젝트의 bind()에 생성한 타깃 함수 오브젝트가 설정
  * 
  *   - BoundThis. bind()에 바인딩된 this 오브젝트.
  *                
  *   - BoundArgument. bind()에 바인딩된 아규먼트 리스트
  *                    이것은 bind()메소드의 첫번째 파라미터에다가 this로 참조할 오브젝트를
  *                    작성하고 두번째 파라미터 이후에다가 파라미터를 작성한다.
  *                    따라서 bind()을 BoundThis,BoundArgument에다가 저장을 해야한다.
  * 
  *                    그래야 bind()메소드로 만든 function 오브젝트를 호출했을때
  *                    값을 사용할 수있다. 그것을 위해 여기에다 저장한다.
  * 
  *   - Match. 정규 표현식의 매치 결과이다.
  * 
  *   - ParameterMap. 아규먼트 오브젝트와 함수의 파라미터를 매핑하는데 사용된다.
  * 
  *   -------------------------------------------------------------------------------
  * 
  *   - 이와 같이 오브젝트에 따라서 프로퍼티가 선택적으로 설정된다.
  *     이런 프로퍼티들은 엔진 내부에서 사용하는 것이므로 개발자 프로그램에서 값을
  *     악세스 할 수 없다.
  * 
  *   - 다만 PrimitiveValue나 Scope같은 것은 브라우저의 개발자 도구를 통해서 같은 이름으로
  *     값이 표시되기도 한다.
  * 
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};


window.onload = function() {
};
