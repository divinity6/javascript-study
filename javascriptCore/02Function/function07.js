/**
  * 프로그램 설명문서 주석
  * 2021.03 31 수업
  * 
  *     - 잠만 정리 :: 
  *     -그니깐 function 키워드를 만나면 주변외부환경을 스코프에 설정하고
  *      함수를 호출해서 엔진컨트롤이 함수 안으로 들어오면
  *      스코프에 설정되어 있는 주변 외부환경을 외부 렉시컬 환경참조에 저장하고
  *      함수 안의 환경을 전부 선언적 환경 레코드에 저장한다 이말이군
  * ㄴ
  *     - 노노 위의것이 아님이것임
  *     == 함수(Function 오브젝트)의 스코프는, function 키워드를 만났을 때 [[Scope]]에 
  *        설정하며, 함수를 호출하면 실행 컨텍스트를 만드는데, 그 때 Function 오브젝트에 
  *        설정된 [[Scope]]를 스코프로 사용한다
  * 
  * 
  *           ===== 함수 코드 해석 순서 =====
  * 
  *     1. 함수 선언문 해석
  *     - function getBook(){};
  * 
  *     2. 변수 초기화
  *     - var title = undefined;
  *     - var readBook = undefined;
  * 
  *     3. 코드 실행
  *     - var title = "JS책";
  *     - var readBook = function(){};
  *     - getBook();
  * 
  *     ---------------------------------------------------------------
  * 
  *     - 코드에서 book [[함수를 호출 했을 때]] book()안으로 엔진컨트롤이
  *       이동하게 된다.
  *     ----> 그럼 우선 코드 안에서 함수 선언문을 추려내서 해석한다.  
  *     ----> 그리고 다시 처음으로 올라간다.
  *     ----> 그러면 현재 한번 돈것이다. 소스코드를 한번 쫙 훑은 것이다.
  *     
  *     - 그 후 변수를 초기화 시킨다
  *     ----> title이 있으면 값은 undefined로 초기화 시키고
  *           ("JS책"은 아직 할당하지 않는다)
  *     ----> getBook()은 이미 했고, readBook()이 변수이다. 그러면
  *           다시 초기화를 시킨다. 값을 할당하지 않는다.
  *     ----> 변수는 선언만하고 초기 값으로 undefined를 할당한다.    
  *     ----> 그러면 현재 두번 돈 것이다.
  *     ----> 그다음에 다시 처음으로 올라간다.
  * 
  *     - 그리고 debugger를 만나게 된다. (이것은 세번째 실행하는 단계다.)
  *     ----> 처음 돌때는 선언문을 전부 해석하고,
  *           다음 두번째 돌때는 변수를 선언하고 초기 값으로 undefined를 할당한다.
  *           그다음 세번째로 올라가면 debugger에서 멈추게 된다.
  * 
  *     - 그다음에 내려가게 되면 실행을 하게되는 것이다.
  *     ----> 코드를 실행하는 것이다. 그래서 "JS책"을 title에 할당하게 되고,
  *           getBook()은 이미 했기 때문에 패스,
  *     ----> 그리고 readBook()에다가 function 오브젝트를 만들어서 할당하게 된다.
  *     ----> 그리고난 다음에 getBook()을 호출하게 되는 것이다.
  * 
  *     - 그러면 다시 엔진컨트롤이 getBook()안으로 이동하게 된다.
  *     ----> 그 후에는 앞에서 했던 것과 같이 세번 돌면서 처리를 하게된다.
  * 
  *     ---------------------------------------------------------------------------
  * 
  *     - 다시 한번 정리하면 처음 돌때는 함수안의 선언문을 추출해서 순서대로 해석한다.
  *     ----> 그리고 스코프에 등록을 할 것이다.
  * 
  *     - 그다음에 다시, 처음으로 올라가서 함수 코드 안에서 변수를 추출한다.
  *     ---->  그리고 그값으로 undefined를 설정한다.
  * 
  *     - 그리고 이것을 scope에 저장하게 된다.
  *     ---->  그리고 일단 여기까지만 하면 식별자 해결에는 문제가 없는것이다.
  * 
  *     - 비록 이것은 값이 undefined 이지만 해결은 할 수 있는 것이다.
  * 
  *     - 그리고 실행을 하게된다.
  *     ----> 그때는 "JS책" 값을 할당하게 되고, function 오브젝트를 만들어서,
  *           readBook()에다가 할당하게 된다.
  * 
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};


window.onload = function() {
  function book(){
    debugger;
    var title = "JS책";
    function getBook() {
      return title;
    };
    var readBook = function(){};
      getBook();
  }
  debugger;
  var test ="이것은 undefined로 할당됨";
  book();

  /*
            ===== 함수 선언문 해석 =====

      1. 마지막 줄에서 book() 함수를 호출한다.

      2. 엔진 제어가 book 함수의 첫 번째 줄로 이동한다.
      - debugger를 실행하지 않는다

      3. 함수 안에서 함수 선언문을 찾는다
      - 위에서 아래로 내려가면서 하나씩 검색한다

      4. function getBook(){}이 함수 선언문이므로
      - function 오브젝트를 생성한다(이때 외부 [Scope]도 설정된다.)

      5. 더 이상 함수 선언문이 없으므로
      - 다시 함수의 첫 번째 줄로 이동한다.

      - 여기까지가 함수 선언문 해석이다

      =======================================================================
      =======================================================================

            ===== 변수 초기화 =====
      
      6. debugger를 실행하지 않는다.

      7. var title = "JS책";
      - title 변수에 undefined를 할당한다
      - "JS책"을 할당하지 않는다

      8. function getBook(){}은
      - 초기화를 했으므로 초기화 하지 않는다.

      9. var readBook = function(){};
      - readBook 변수에 undefined를 할당한다
      - 함수 표현식은 변수를 선언만 한다.

      10. 여기까지가 초기화 단계이며
      - 다시 함수의 첫 번째 줄로 이동한다.

      ---------------------------------------------------

      - 변수초기화는 debugger 앞에 엔진컨트롤이 있는 상태.
        그리고 debugger는 실행이니깐 패스한다.

      - readBook을 만나면 readBook을 프로퍼티 id로 하고,
        undefined를 프로퍼티 값으로 해서 스코프에 등록하게 된다.
        이것이 변수 초기화다.

      - 여기까지가 초기화 단계다.

      - 그러면 다시 debugger 앞으로 엔진 컨트롤이 이동하게 된다.

      =======================================================================
      =======================================================================

            ===== 코드 실행 =====

      1. debugger를 실행하며, 실행이 멈춘다

      2. var title = "JS책";
      - title 변수에 "JS책"을 할당한다.

      3. function getBook(){ return title };
      - 실행이 아닌 선언이므로 다음 줄로 이동한다.

      4. var readBook = function(){};
      - function 오브젝트를 생성하여
        readBook 변수에 할당한다
      
      - readBook이 function 오브젝트가 되므로
        이제 readBook 함수를 호출할 수 있다.

      5. getBook() 함수를 호출한다
      - 지금까지와 같은 순서와 방법으로
      - getBook() 함수의 함수와 변수를 초기화하고 코드를 실행한다.

      ----------------------------------------------------------------------

      - title 변수에 "JS책"을 할당하면 스코프에 JS책이 완전한 형태로 들어가 있게 된다.

      - 그리고 getBook()은 함수 선언문이기 때문에 아무것도 안하고 내려가게 된다.
        ( 정상적이기 때문에... )

      - readBook으로 내려오게 된다. 그러면 function 오브젝트를 생성해서 
        readBook 변수에 할당한다.

      - 그리고 이시점에서 readBook이 function 오브젝트가 되니깐 호출 할 수 있다.

      - 만약에 readBook 앞에서 readBook 함수를 호출 했다면 이것은 에러가 날 것이다.
        왜냐? readBook의 값이 undefined이기 때문에 그렇다.

      - 그리고 readBook에 오브젝트 할당이 끝나고 아래에서 호출하면 호출 될것이다.

      --** 따라서 순서가 매우 중요하다.

      ===== 지금까지 이와같은 방법으로 세번 돌면서 함수 선언문을 해석하고, 그리고 변수를
            초기화하고 그다음에 실행하면서 이와같이 값을 하나씩, 하나씩 설정하는 것이다.

      ===== 이렇게 엔진은 세단계를 거치면서 함수안의 코드를 선언하고, 초기화하고, 실행한다.
  */
};
