/**
  * 프로그램 설명문서 주석
  * 2021.03 17 수업
  * 
  *           ===== 식별자 해결 =====
  * 
  *     - 식별자 해결 Identifier Resolution
  * 
  *     ----> 사용할 변수/함수를 결정하는것
  *     ----> 예: point 변수
  *     ----> 신속, 정확한 검색을 위해 스코프 필요
  * 
  *     - 스코프에서 이름을 찾기 위해
  *     ----> 스코프에 이름을 설정
  *     ----> 값은 변경되지만, 이름은 변경되지 않음
  *     ----> 식별자 해결 대상은 다름
  * 
  *     - resolution의 사전적 의미: 해결,결정
  *     ----> 결정도 시멘틱적으로 맞음
  * 
  *    ----------------------------------------------------
  * 
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};


window.onload = function() {
  
  var point = 100;
  function getPoint(){
    var point = 200;
    return point;
  };
  var result = getPoint();
  console.log( result );



  /*
      - getPoint()함수를 호출하게 되면 엔진컨트롤이 getPoint()안으로 이동하게 된다.
        그리고 point 변수에 200을 하게되고 리턴 point를 하게된다.

      - 이 때 point 변숫값은 200을 반환하게 될 것이다. 그런데 바깥에도 point 변수가 있다.
        그러면 point 변수가 2개 있는데 200을 반환하는 이유는 getPoint()안에있는 내용이
        scope이기 때문에 그렇다.

      - 즉, scope 안에서 먼저 찾고, 그것이없으면 그위의 스코프에가서 찾고, 그러면서 계속
        찾아나가는 형태가 된다. 스코프에서 이름을 찾기위해서! 
        
        지금과같이 point 변수를 scope에서 찾기 위해서 """" scope에 이름을 설정한다."""" 
        (이것이 식별자네!!!!!)
        그래야 식별자로서 찾아갈 수 있기 때문이다.
        그리고 scope안에서 찾을수 있기 때문이다.
        그리고 스코프에 설정된 변수 또는 함수는 [[[값은 변경되지만 이름은 변경되지 않는다]]]

      - 자바스크립트는 프로퍼티다. 이름은 유일하지만, 값은 바뀔수가 있다. String -> Number
        이런식으로 값은 변경될 수 있다.

      - 따라서, 식별자 해결 대상은 이름이다. 그래서 식별"자"이다.
  
  */

  debugger;

  /*
          ===== 스코프 용도 =====

      - 식별자 해결을 수단, 방법
      ----> 스코프가 목적이 아님

      - 식별자가 유일하면
      ----> 스코프는 필요하지 않음
      ----> 하지만, 유일하게 작성하는 것은 불가능
      ----> 그래서 스코프가 필요한 것.

      ---------------------------------------------
  
      - 스코프는 식별자 해결을 위한 수단과 방법이다.
        스코프가 목적이 아니다.

      - 아래 식에서 point 변수의 값을 구하기 위해 스코프를 사용한것이다.
        바깥에도 point 변수가 있지만 안에도 있기 때문에 안의 스코프를 먼저
        사용한 것이다.

      - 만약 식별자가 유일하다면, 만약 바깥 point가 Apoint고 안쪽 point가 Bpoint라면
        return Apoint 하게되면 바깥 point를 반환 할 것이다. 그러나 이렇게 식별자를
        유일하게 작성할 수는 없다.

      - 물론, 작성할 수는 있다. 그러나 쫙 펼쳐놓고 유일하게 이름을 줄수있지만 그렇게
        주게되면, point가 가지고 있는 시멘틱을 잊어버리게 된다.

      - getPoint 함수 이름에 point를 구한다는 시멘틱을 가지고 있는데 유일하게 이름을
        주다보면 안의 코드와 함수이름의 시멘틱이 다를수가 있다라는 것이다.

      - 정확하게 표현하지 못할 수가 있다라는 것. 따라서 불가능하다고 볼 수 있다.

      - 그래서 스코프가 필요한 것이다.

      - 식별자가 유일하면 좋지만, 그러면 스코프라는 개념이 없이 주차장처럼 쫙 깔아놓고
        번호를 불러내면 되는 거아닌가? 그러나 그것이 안되기 때문에
        계층적으로 만들어 놓은 것이다. 이것이 바로 스코프라는 것이다.
  

      - 정리하면 scope가 목적이 아니다. 스코프를 많이 이야기하다보니 스코프가 주체인것
        처럼되는데 아니다. 식별자 해결을 위한 수단,또는 방법이다

      - 스코프가 존재하기 때문에 식별자가 존재하는 것은 아니다라는 것.
        식별자 해결을 위해 스코프가 있는것이지 스코프 때문에 식별자가 있는 것은 아니다라는 것
  */

  var point = 100;
  function getPoint(){
    var point = 200;
    return point;
  };

  var result = getPoint();
  console.log( result );

  /*

  
  */

};
