/**
  * 프로그램 설명문서 주석
  * 2021.04 29 수업
  * 
  *           ===== 환경 레코드 구성 =====
  * 
  *   - 환경 레코드를 구분하는 이유
  *   ----> 기록 대상에 따라 다르기 때문이다
  * 
  *   - 선언적 환경 레코드
  *   ----> DER: Declarative Environment Record
  *   ----> function, 변수, catch 문에서 사용
  *   ----> 앞 절에서 환경 레코드에 설정한다고 했는데
  *         설명을 위한 것으로 실제로 여기에 설정
  * 
  *   - 오브젝트 환경 레코드
  *   ----> OER: Object Environment Record
  *   ----> 글로벌 함수와 변수, with 문에서 사용
  *   ----> 정적이 아니라 동적이기 때문
  * 
  *   ================================================
  * 
  *   실행 콘텍스트(EC): {
  *     렉시컬 환경 컴포넌트(LEC): {
  *       환경 레코드(ER): {
  *         선언적 환경 레코드(DER): {
  *           point: 123
  *         }
  *         오브젝트 환경 레코드(OER): {
  *         }
  *       }
  *       외부 정적 환경 참조(OLER): {}
  *     }
  * 
  *     변수 환경 컴포넌트(VEC): {
  *     }
  * 
  *     This 바인딩 컴포넌트(TBC): {
  *       GlobalObject
  *     }
  * 
  *   }
  * 
  *   ------------------------------------------------------------------------
  * 
  *   - 환경 레코드는 선언적 환경 레코드와 오브젝트 환경 레코드로 구분된다.
  *   ----> 환경 레코드를 이렇게 구분하는 이유는 기록하는 대상에 따라 다르기 때문에
  *         그렇다.
  * 
  *   ----> 어떤것은 선언적 환경 레코드에 기록하고, 어떤것은 오브젝트 환경 레코드에
  *         기록하기 때문에 그렇다.
  * 
  *   - 선언적 환경 레코드는 function, 변수, catch문에서 사용한다. 즉, 이러한것에
  *     관련된 것은 선언적 환경 레코드에 기록한다는 것이다.
  *   
  *   - 오브젝트 환경 레코드는 글로벌 오브젝트의 글로벌 함수와 변수, 그리고 with문
  *     에서 사용한다.
  *   ----> 즉, 여기에 있는 것들은 오브젝트 환경 레코드에 기록된다
  *   ==== 이렇게 하는 것은 정적이 아니라 동적이기 때문에 그렇다. ====
  * 
  *   = 즉, 정적인 것은 선언적 환경 레코드에 기록하고,
  *     동적인 것은 오브젝트 환경 레코드에 기록한다는 것이다. =
  * 
  *   ----> 예) with문은 with문을 반복할 때마다 Scope를 만든다.
  *         한번 돌 때마다 동적으로 만들어 지는 것이다. 
  *         그렇기 때문에 정적인 것과는 차이가 많다.
  *         ( 정적 == 오브젝트를 만들때 스코프 설정, 동적 = 호출될때마다 스코프 설정 )
  * 
  *   ----> 정적은 함수를 읽었을 때, 한번만 DER에 설정하면 된다.
  *         그러면 엔진관점에서 보면 DER과 OER은 처리하는 방법이 다르다.
  *         ( 따라서 이와같이 구분을 해놓은 것이다. )
  * 
  *   ==================================================================================
  *   ==================================================================================
  * 
  *           =====  글로벌 환경 =====
  * 
  *   - Global Environment
  *   ----> 글로벌 오브젝트에서 사용
  *   ----> 렉시컬 환경 컴포넌트와 형태 같음
  * 
  *   - 동적으로 함수와 변수 바인딩
  *   ----> 함수에서 var 키워드를 사용하지 않고
  *         변수를 선언하면 글로벌 오브젝트에 설정되기 때문이다
  * 
  *   ----> 이런 이유로 오브젝트 환경 레코드를 사용한다,
  * 
  *   - 외부 렉시컬 환경 참조 값은 null
  *   
  *   ================================================
  * 
  *   실행 콘텍스트(EC): {
  *     글로벌 환경(GE): {
  *       환경 레코드(ER): {
  *         오브젝트 환경 레코드 : 글로벌 오브젝트
  *       },
  *       외부 렉시컬 환경 참조(OLER): null
  *     }
  * 
  *   }
  * 
  *   ------------------------------------------------------------------------
  *   
  *   - 글로벌 환경이다. 글로벌 환경은 글로벌 오브젝트에서 사용한다
  *     (( 그리고 렉시컬 환경 컴포넌트와 형태가 같다!! ))
  *   ----> 다만 여기에서는 선언적 환경 레코드(DER)가 여기에서는 필요가 없다.
  *   ----> 단지, 오브젝트 환경 레코드(OER)만 필요할 뿐이다.
  * 
  *   - 따라서, 오브젝트 환경 레코드만 존재하고, 렉시컬 환경 컴포넌트를
  *     글로벌 환경이라고 이름을 준 것이다.(여기는 글로벌 환경이니깐,)
  * 
  *   ----> 하지만, 다른 처리 방법은 렉시컬 환경과 같다.
  *          ( 다만, 정적이 아니라 동적으로 반영한다는 것이다. )
  * 
  *   - 동적으로 함수와 변수를 바인딩하는 것은 
  *     함수에서 var 키워드를 사용하지 않고 변수를 선언하면,
  *     그것은 글로벌 변수가 되고, 글로벌 오브젝트에 설정된다.
  * 
  *   - 그러면 정적으로 사용했던 것과는 차이가 많다.
  *   ----> 왜냐하면, 정적은 한번 설정하면 바뀌질 않는데, 이것은
  *         뜬금없이 갑자기 휙 튀어나온다는 것이다.
  * 
  *   ----> 그러면 정적 개념이 깨지게 된다.
  *         (그래서 이렇게 동적으로 가게된다.)
  * 
  *         그리고 이렇게 할 수 있는 배경에는 글로벌 오브젝트는 소스전체를
  *         통틀어 하나만 존재하기 때문에 그렇다.
  * 
  *   - 때문에 글로벌 환경을 하나만 만들어 두면, 어느코드에서 든지 여기에다가
  *     동적으로 저장을 할 수 있는 것이다.
  * 
  *   - 글로벌 오브젝트는 어디에 속하지 않는다, 
  *     따라서 외부 렉시컬 환경 참조 값(OLER)은 null이다.
  * 
  */

console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};
