/**
  * 프로그램 설명문서 주석
  * 2021.04 19 수업
  * 
  *           ===== 실행 콘텍스트 =====
  *           ( 함수를 호출했을때 실행 콘텍스트를 만드넹...ㅋㅋ )
  * 
  *   - Execution Context
  *   ----> 함수가 실행되는 영역, 묶음
  *   ----> 함수 코드를 실행하고 실행 결과를 저장
  *   ----> 스펙상의 사양
  *   ----> 실행 콘텍스트 스펙
  * 
  *   - music("음악")으로 함수를 호출하면
  *   ----> 엔진은 실행 콘텍스트를 생성하고
  *   ----> 실행 콘텍스트 안으로 이동한다
  * 
  *   - 실행 콘텍스트 실행 단계
  *   ----> 준비 단계, 초기화 단계, 코드 실행 단계
  * 
  *   ----------------------------------------------------------
  * 
  *   - 실행 콘텍스트란?
  *   ----> 함수가 실행되는 영역, 묶음이다.
  *         함수가 실행되기 위해 영역이 필요하지만, 개발자 관점에서 보면
  *         묶음이 더 중요하다고 할 수 있다.
  * 
  *   ----> 함수 코드 실행 및 실행 결과 저장
  *         함수가 실행된 결과.
  *         예) 변수에 값을 할당하거나 다른 함수를 호출해서 리턴값 저장등.
  *         
  *   ----> 그런데 이것은 스펙상의 사양이다.
  *         즉, 개발자가 실행 콘텍스트를 가지고 무언가를 조종할 수는 없다.
  *         (엔진이 처리하는 것이다.)
  * 
  *   - music으로 함수를 호출하면 엔진은 실행 콘텍스트를 만든다.
  *     (함수가 실행되는 영역)
  *   ----> 그리고 실행 콘텍스트 안으로 이동한다.
  *         ( 이것을 엔진 컨트롤이 실행 콘텍스트 안으로 이동한다고 한다. )
  * 
  *   ----> 실행 콘텍스트는 크게 3개의 단계로 나눌 수 있다.
  *         ( 준비, 초기화 , 코드실행 )
  *         지금까지는 초기화와 코드 실행 단계를 중점적으로 살펴봤다.
  *    
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};

function music( title ){
  var musicTitle = title;
};
music("음악");

/**
 * 
 *          ===== 실행 콘텍스트 =====
 * 
 *  - Execution Context 생성 시점
 *  ----> 실행 가능한 코드를 만났을 때
 * 
 *  - 실행 가능한 코드 유형
 *  ----> 함수 코드, 글로벌 코드, eval 코드
 * 
 *  - 코드 유형을 분리한 이유
 *  ----> 실행 콘텍스트에서 처리 방법과
 *        실행 환경이 다르기 때문이다
 * 
 *  ----> 함수 코드: 렉시컬 환경
 *  ----> 글로벌 코드: 글로벌 환경
 *  ----> eval 코드: 동적 환경
 * 
 *  ----------------------------------------------------------
 * 
 *  - 실행 콘텍스트를 만드는 시점은
 *  ----> 실행 가능한 코드를 만났을 때이다.
 * 
 *  - 여기서 실행 가능한 코드란?
 *  ----> 함수 코드, 글로벌 코드, eval 코드이다.
 *  ----> 함수 코드 : 함수에 작성된 코드
 *  ----> 글로벌 코드 : 글로벌 오브젝트에 작성된 코드
 *  ----> eval 코드 : 문자열(함수코드와 글로벌 코드와는 다르다 - 형태도 다름)
 * 
 *  - 코드 유형을 분리한 이유는 
 *  ----> 실행 콘텍스트에서 처리하는 방법과 실행 환경이 다르기 때문이다.
 *  ----> 즉, 엔진관점에서 접근하는 것이다.
 * 
 *  ----> 즉, 함수 코드, 글로벌 코드, eval 코드은 실행 환경도 다르고 처리하는 방법도
 *        다르다는 것이다.
 * 
 *  ----> 함수 코드: 렉시컬 환경(즉, 정적 환경)
 *  ----> 글로벌 코드: 글로벌 환경(환경이다.)
 *  ----> eval 코드: 동적 환경(문자열이니 파싱과 해석을 해야한다. 그러므로 동적 환경)
 * 
 *  - 엔진관점에서 본다면 환경이 다르다.
 *  ----> 그러므로 이렇게 세가지로 분리하고 있다.
 * 
 * 
 *  ==================================================================================
 *  ==================================================================================
 * 
 *            ===== 실행 콘텍스트 상태 컴포넌트 =====
 * 
 * 
 *          실행 콘텍스트(EC): {
 *            렉시컬 환경 컴포넌트(LEC): { },
 * 
 *            변수 환경 컴포넌트(VEC)): { },
 * 
 *            this 바인딩 컴포넌트(TBC)): { },
 *          }
 * 
 * 
 *  - 실행 콘텍스트 상태를 위한 오브젝트
 *  ----> 실행 콘텍스트 안에 생성
 * 
 *  - 상태 컴포넌트 유형
 * 
 *  ----> 렉시컬 환경 컴포넌트(LEC):
 *        Lexical Environment Component
 * 
 *  ----> 변수 환경 컴포넌트(VEC):
 *        Variable Environment Component
 * 
 *  ----> This 바인딩 컴포넌트(TBC):
 *        This Binding Component
 * 
 *  ----------------------------------------------------------
 * 
 *  - 상태 컴포넌트, 실행 콘텍스트 상태를 위한 [[오브젝트]] 이다
 *  ----> Lexical , Variable , This, 이것이 오브젝트이다.
 *        그리고 이것을 실행 콘텍스트 안에 생성한다.
 * 
 *  ----> 결국 실행 콘텍스트(EC)도 프로퍼티로 저장되기 때문에 오브젝트인 것이다.
 *        따라서, 오브젝트를 만들고 Lexical , Variable , This 이 세개의
 *        컴포넌트를 만들어서,
 *        ( 물론 이세개도 각각 오브젝트이다, 오브젝트 안에다가 각각 
 *         프로퍼티를 작성하게 되는 것이다. )
 * 
 *  ----> 우선, Lexical , Variable , This 이렇게 세개를 만들고,
 * 
 * 
 *  ----> 렉시컬 환경 컴포넌트(LEC):
 *        Lexical Environment Component
 *        (앞의 함수코드: 렉시컬 환경을 처리하기 위한 부분.)
 * 
 *  ----> 변수 환경 컴포넌트(VEC):
 *        Variable Environment Component
 * 
 *        (렉시컬 환경과 변수 환경은 초기 값이 같다.)
 *        (그런데 별도로 나눈 이유는 복원을 하기 위함이다.)
 *        (다시 돌아왔을 때, 변수환경의 초기 값을 렉시컬환경에 설정하기 위한 것이다.)
 * 
 *        그런데 여기서 렉시컬 환경은 정적 환경이지만, 좀더 들어가면 여기에
 *        글로벌 환경과 동적 환경도 같이 사용할 수 있다.
 *        (포멧은 같다. 다만 처리하는 환경도 다르고 세부적으로 분류된것이 다르다.)
 * 
 *        - 포괄적으로 이야기하면 렉시컬 환경안에서 다 처리하게 된다.
 * 
 * 
 *  ----> This 바인딩 컴포넌트(TBC):
 *        This Binding Component
 * 
 *        그리고 This 바인딩 컴포넌트는 함수안에서 This로 참조하는 오브젝트다.
 *        예) 함수안에서 obj.abc를 했을 때, obj를 abc안에서 this로 참조할 수 있다.
 * 
 *        - 이런것을 여기에다가 바인딩 시키는 것이다.
 * 
 * 
 *  - 컴포넌트가 일반적인 컴포넌트와 뉘앙스가 좀 다르다.
 *  ----> 그러나 엔진관점의 컴포넌트로 생각하면 된다.
 * 
 */