/**
  * 프로그램 설명문서 주석
  * 2021.04 27 수업
  * 
  *           ===== 실행 콘텍스트 실행 과정 =====
  * 
  *   1. getPoint 오브젝트의 [[Scope]]에 글로벌 오브젝트 설정
  * 
  *   2. 마지막 줄에서 getPoint() 함수를 호출하면
  * 
  *   3. 엔진은 실행 콘텍스트를 생성하고 실행 콘텍스트 안으로 이동한다
  * 
  *   -----------------------
  *         준비 단계
  *   -----------------------
  * 
  *   4. 컴포넌트를 생성하여 실행 콘텍스트에 첨부
  *      ( 손나코토, 이때 크게 만들어두는구나 )
  * 
  *   -- 렉시컬 환경 컴포넌트
  *   -- 변수 환경 컴포넌트
  *   -- this 바인딩 컴포넌트
  * 
  *   ----> 그리고 난 다음에 환경 레코드를 생성한다
  * 
  *   5. 환경 레코드를 생성하여 렉시컬 환경 컴포넌트에 첨부
  *   
  *   
  *   ======= 여기까지 모습 =======
  *   
  *   실행 콘텍스트(EC): {
  *     렉시컬 환경 컴포넌트(LEC) = {
  *       환경 레코드(ER): {}
  *     },
  *     변수 환경 컴포넌트(VEC): {}
  *     this 바인딩 컴포넌트(TBC): {}
  *   }
  *    ----> 그리고 환경 레코드를 렉시컬 환경 컴포넌트를 첨부한다
  *    ----> 나중에 실행하는 과정에서 함수안의 함수,변수를 바인딩하는데
  *          지금은 준비하는 단계이기 때문에 빈 오브젝트가 된다.
  *   ============================
  * 
  *   -- 함수 안의 함수, 변수를 바인딩 한다.
  * 
  *   6. 외부 렉시컬 환경 참조를 생성하여 렉시컬 환경 컴포넌트에 첨부하고
  *      ( 나루호도, 이때 첨부하는구나 )
  * 
  *   -- function 오브젝트의 [[Scope]]를 외부 렉시컬 환경 참조에 설정(참조)
  * 
  *   ======= 여기까지 모습 =======
  *   
  *   실행 콘텍스트(EC): {
  *     렉시컬 환경 컴포넌트(LEC) = {
  *       환경 레코드(ER): {}
  *       외부 렉시컬 환경 참조(OLER): {
  *         base: 200
  *       }
  *     },
  *     변수 환경 컴포넌트(VEC): {}
  *     this 바인딩 컴포넌트(TBC): {}
  *   }
  * 
  *   -----------------------
  *         초기화 단계
  *   -----------------------
  * 
  *   6. 호출한 함수의 파라미터 값을
  * 
  *   -- 호출된 함수의 파라미터 이름에 매핑
  *   -- 환경 레코드에 작성
  * 
  *   7. 함수 선언문을 function 오브젝트로 생성
  * 
  *   8. 함수 표현식과 변수에 초기값 설정
  * 
  *   9. 여기까지는 외부에 실행 상태를 제공하지 않는다
  * 
  *   ======= 여기까지 모습 =======
  *   
  *   실행 콘텍스트(EC): {
  *     렉시컬 환경 컴포넌트(LEC) = {
  *       환경 레코드(ER): {
  *         bonus: 70,
  *         point: undefined
  *       },
  *       외부 렉시컬 환경 참조(OLER): {
  *         base: 200
  *       }
  *     },
  *     변수 환경 컴포넌트(VEC): {}
  *     this 바인딩 컴포넌트(TBC): {}
  *   }
  * 
  *   ============================
  *   
  *   ----> 그런데 이때까지는 외부의 실행 상태를 제공하지 않는다.
  *         그래서 이상태에서 자바스크립트 코드로 이안의 값을 설정하거나
  *         어떤 다른 처리를 할 수 없다. 엔진의 내부 처리다.
  * 
  *   -----------------------
  *         실행 단계
  *   -----------------------
  * 
  *   10. 함수 안의 코드를 실행한다.
  *   
  *   -- var point = 100;
  * 
  *   11. 실행 콘텍스트 안에서 관련된 함수와 변수를 사용할 수 있다.
  * 
  *   ------------------------------------------------------------------
  *   
  *   - 위와같은 개념으로 실행콘텍스트,그리고 렉시컬환경안에서 모든것을 처리하니깐
  *     엔진은 땡큐인 것이다.
  * 
  *   ----> 왜냐하면 번거롭지 않기 때문이다.
  *   ----> 주머니안에 있는것으로 꼼지락 꼼지락 해가지구 만들어 내는 것아닌가.
  * 
  *   - 이것이 현재 실행 되는 위치
  *   ----> 메모리
  *         ( 메모리에서 실행되기 때문에 들락날락 할 이유도 없다. )
  * 
  *   - 그렇기 때문에 엔진이 굉장히 빠르게 처리된다라는 것.
  */
console.log("=====================================");

"use strict"
// console.log 사용
var log = function( value ){
  console.log('--- ' + value +' ---');
};

log("실행 콘텍스트 실행 과정 ");
var base = 200;
function getPoint( bonus ) {
  var point = 100;
  return point + base + bonus;
};
console.log(getPoint(70));
// :: 370


/**
 *          ===== 정리 시간 =====
 * 
 *  - 요구사항
 *  
 *  - 123이 console에 출력되는 과정을 실행 콘텍스트 관점에서
 *    논리적으로 전개하시오
 */

function book() {
  function get(){
    return point;
  };
  var point = 123;
  return get();
};
console.log(book());

/**
 *  위의 코드를 정리하고 난 후,
 *  ============================================
 * 
 *  정리하는 차원에서 조금 더 복잡한 시나리오를 작성하고, 
 *  코드를 작성한 후, 위에 작성한 대로 프로그램이 흘러가는지  
 *  검증해보세요. 엔진 내부 처리이지만 내가 엔진이라고 생각하고 
 *  정리하면, 완전하게 내 것이 될 것입니다.
 * 
 */

/**
 *  1.
 *  -------------------------------
 *            외부
 *  -------------------------------
 * 
 *  엔진이 function 키워드를 만나면 function 오브젝트를 만들고
 *  [[Scope]]에 글로벌 오브젝트를 설정한다.
 * 
 *  그리고 그외의 것이 없기 때문에 내려가서 console.log()를 실행한다
 * 
 */

/**
 *  2.
 *  -------------------------------
 *            준비 단계
 *  -------------------------------
 * 
 *  엔진 컨트롤이 book()을 만나면 먼저 실행 콘텍스트를 생성한다.
 *  그후 book안으로 이동한다.
 * 
 *  이때 실행콘텍스트에 
 * 
 *  - 렉시컬 환경 컴포넌트
 *  - 변수 환경 컴포넌트
 *  - this 바인딩 컴포넌트
 * 
 *  를 생성한다.
 * 
 *  그리고 난 후에
 *  렉시컬 환경 컴포넌트의 환경레코드안의
 *  선언적 환경레코드를 만들어서 실행콘텍스트에 첨부한다.
 * 
 *  그리고 [[Scope]]에 설정된 스코프를 렉시컬 환경 컴포넌트 안의
 *  외부 렉시컬 환경 참조에 설정한다(글로벌 오브젝트는 오브젝트 환경 레코드에 설정)
 * 
 */

/**
 *  3.
 *  -------------------------------
 *            초기화 단계
 *  -------------------------------
 * 
 *  먼저 호출된 곳에서 파라미터 값으로 매핑한 값이 있는지 확인하고
 *  있으면 선언적 환경 레코드안에 바인딩한다.
 *  
 *  그러나 위의 경우는 없으므로 넘어간다.
 * 
 *  그리고 내려와서 get 함수를 만나 function 오브젝트를 생성하고
 *  point를 get함수의 [[Scope]]에 설정한다.
 * 
 *  또 내려와서 point에 undefined를 설정한다.
 */

/**
 *  4-1.
 *  -------------------------------
 *            실행 단계
 *  -------------------------------
 * 
 *  get함수를 만난 후 내려가서 point에 123을 할당하고 retrun get()을만나 
 *  get내부안으로 엔진컨트롤이 이동한다.
 * 
 */

/**
 *  5.
 *  -------------------------------
 *            준비 단계
 *  -------------------------------
 * 
 *  안으로 들어오면 또다시 실행 콘텍스트를 만들고 렉시컬,변수, 
 *  this 바인딩 컴포넌트를 생성한다.
 * 
 *  그리고 렉시컬 환경 컴포넌트안에 선언적 환경 레코드를 첨부하고
 * 
 *  get의 [[Scope]]에 설정되어있는 point를 get의 외부렉시컬 환경참조에
 *  설정한다.
 */

/**
 *  6.
 *  -------------------------------
 *            초기화 단계
 *  -------------------------------
 * 
 *  그리고 초기화를 하려고 봤는데 호출한곳에서 매핑할 값도 없고
 *  안에 변수나 어떤 값도 없다
 * 
 */
/**
 *  7.
 *  -------------------------------
 *            실행 단계
 *  -------------------------------
 * 
 *  return point를 만나서 외부렉시컬 환경참조안에들어있는 point : 123을
 *  참조해서 point에 넘겨주고 값을 반환한다
 * 
 */

/**
 *  4-2.
 *  
 *  그리고 넘겨받은 값을 반환한다.
 */