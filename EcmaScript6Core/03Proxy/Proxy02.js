/**
 * 프로그람 설명문서 주석
 * 2022.02 20 수업
 *
 *
 *           ===== Proxy 모습 =====
 *
 *      - 식당에서 3명이 식사하고 있는 모습에서
 *
 *      - 왼쪽 사람이 오른쪽 사람 앞의 밥을 가져오려고 한다
 *      --> 왼쪽 사람이 가운데 사람에게 밥을 달라고 말하고
 *      --> 가운데 사람이 오른쪽 사람에게 말하면
 *      --> 오른쪽 -> 가운데 -> 왼쪽 순서로 밥을 받을 수 있다
 *
 *      - 이 모습에서 가운데 사람이 Proxy
 *      --> 왼쪽 사람의 말을 받아 오른쪽 사람에게 말하고
 *      --> 오른쪽 사람에게서 밥을 받아 왼쪽 사람에게 전달한다
 *
 *      - 이와 같이 Proxy 는 중간에서 대리 역할을 한다
 *
 *      - 왼쪽 사람이 오른쪽 사람에게 직접 말하고 밥을 받으면
 *      --> Proxy 가 필요하지 않다
 *
 */
console.log( "=====================================" );
"use strict"
// console.log 사용
const { log } = window.console;

/**
 *           ===== Proxy 논리 =====
 *
 *      - 가운데 사람(Proxy)을 거쳐서 받는 모습을
 *      --> 자바스크립트 코드로 표현하면
 *
 */
{
    "use strict";
    log('------------ Proxy 논리 ---------------');
    const target = {food : "밥"};
    /**
     *  뇌피셜)
     *  - 플럭시 안 [[Target]] 에 food 가 들어가 있고 마치
     *    __proto__ 에 들어있는것 처럼 호출할수잇넹...ㅋㅋ
     */
    const middle = new Proxy(target, {});
    const left = middle.food;
    log(left);
    // :: 밥
    debugger;

    // 1. const target = {food:"밥"};
    //    target 은 오른쪽 사람이고
    //    food 는 프로퍼티 키이며, "밥"은 프로퍼티 값이다

    // 2. const middle = new Proxy(target, {});
    //    Proxy 인스턴스를 생성하여 middle 에 할당한다
    //    middle 이 가운데 사람이며 target 을 알 수 있다!!

    // 3. const left = middle.food;
    //    왼쪽 사람이 가운데 사람에게 밥을 달라는 것과
    //    가운데 사람이 오른쪽 사람에게 밥을 달라고 하는 것이다

    // 4. 할당 연산자(=)는
    //    오른쪽 사람이 준 밥을 받아
    //    왼쪽 사람에게 건네주는 것이다

    // 5. left 는 왼쪽 사람이다

    /**
     *  - middle 즉, Proxy 는 "밥"을 가지고 있지 않다.
     *    그렇기 때문에 밥을 가지고 있는 target 에게 "밥"을 달라고 하는 것.
     *
     *  --> 그럼 target 이 값을 구해서 바로 left 에 주는것이 아니라 middle 에게 주는 것
     *  --> 그러면 middle 은 다시 받아서 left 에게 건네주는 것
     *
     *
     *                    ===== 시스템 처리 관점 =====
     *
     *       - middle.food 가 실행되면
     *      --> Proxy 의 getter 가 호출되며
     *      ----> Proxy 에는 내부함수인 [[Get]] 을 가지고 있다
     *
     *      --> Proxy 에서 target 의 getter 를 호출하면서
     *          "food" 를 파라미터로 넘겨 준다
     *
     *      --> new Proxy() 파라미터에 target 을 작성하므로
     *          middle 에서 target 을 알 수 있게 된다
     *
     *      - target 의 [[Get]] 이 food 값을 구해 middle 로 반환하고
     *      --> middle 로 반환된 값을 left 에 할당한다
     *
     *      - 이렇게 Proxy 가 가운데서 대리 역할을 한다
     */

    /**
     *      - 그런데, 위의 코드에서는
     *        middle = new Proxy(target, {}) 코드가 필요가 없다
     *
     *      --> 왜냐하면, middle.food 를 할 필요가 없이,
     *          target.food 를 해도 값이 반환되기 때문.
     *
     *      - 그렇다면, 왜 가운데다가 Proxy 를 두었느냐는 이야기.
     *         굳이 Proxy 단계를 거쳐서 값을 구할 필요가 없다는 것
     *
     *      --> 그런데, SPEC 설계자들은 필요하니깐 넣은 것이다
     *          ( 의중을 헤아려 보자는 이야기 )
     *
     *      --> 그러면, Proxy 의 용도를 더욱 확실하게, 깊게 알 수 있을 것이다.
     *
     *      ----> 지금부터 다루는 내용들이 바로이것.
     *      ----> 가운데다, Proxy 를 왜 두었느냐라는 것.
     *            SPEC 설계자들의 의도를 헤아려 보자라는 것.
     */
}