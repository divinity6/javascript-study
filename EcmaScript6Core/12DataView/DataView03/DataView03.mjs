/**
 * 프로그람 설명문서 주석
 * 2022.05. 04 수업
 *
 *
 *           ===== Endian =====
 *
 *      - 엔디언이란
 *      --> 다수의 바이트로 구성된 값의 순서이다
 *      --> 2 바이트의 12 , 34를
 *      --> 12 , 34 순서 또는 34 , 12 순서로
 *      --> 메모리에 저장하거나 주변 장치로 전송한다
 *
 *      - 엔디언 표기
 *      --> Endian 또는 Endianness 또는
 *      --> 바이트 오더( Byte Order )로 표기한다
 *
 */
console.log("=====================================");
// console.log 사용
const { log } = window.console;
/**
 *           ===== Endian 구분 =====
 *
 *      - 엔디언 구분
 *      --> 빅-엔디언 , 리틀-엔디언 , 믹스드-엔디언
 *
 *      - 16 진수 4바이트로 구성된 12 34 56 78 을
 *        엔디언 구분에 따라 메모리에 배치하면
 *        아래 순서로 배치된다
 *
 *      - 빅-엔디언( Big-endian )
 *      --> 0x12 0x34 0x56 0x78 처럼 앞에서부터 배치
 *          ( 메모리에 저장할때 앞에서부터 배치 )
 *
 *      - 리틀-엔디언( Little-endian )
 *      --> 0x78 0x56 0x34 0x12 처럼 뒤에서부터 배치
 *          ( 메모리에 저장할때 뒤에서부터 배치 )
 *
 *      - 믹스드-엔디언( Mixed-endian )
 *      --> 0x34 0x12 0x78 0x56 처럼 앞뒤를 섞어서 배치
 *          ( 메모리에 저장할때 앞뒤를 바꿔서 배치 )
 */

/**
 *           ===== Endian 차이 대처 =====
 *
 *      - OS , CPU , 컴퓨터에 따라 엔디언이 다르다
 *      --> CPU : IBM 은 빅-엔디언, Intel 은 리틀-엔디언
 *      --> TCP/IP : 빅-엔디언
 *          ( 데이터 전송시 )
 *      ----> 이런식으로 엔디언을 준수해서 전송하고 저장한다.
 *
 *      - 엔디언 차이에 대한 대처 방법
 *      --> TypedArray 는 대처를 할 수 있는 선택이 없다
 *
 *      --> DataView 는 엔디언을 지정할 수 있으며
 *          디폴트는 빅-엔디언이다
 *
 *      --> 우선 디폴트 값을 사용하고, 맞지 않으면
 *
 *      --> DataView 로 엔디언을 지정하여 대처한다
 *
 *      ----> 일반적으로 이부분을 대처하진 않았.
 *            그러나 IOT 같은 주변장치와 바로 연결해서 데이터를
 *            주고받을때는 때로는 필요할 수 있다라는 것.
 *            ( 그때, DataView 로 엔디언을 지정하여 대처하면 된다는 것 )
 */

/**
 *           ===== setInt16() =====
 *
 *      --> Endian 은 바이트의 순서이므로,
 *          setInt8 과 getInt8 은 1방이트이므로 3번째 파라미터가 없다.
 *          ( 엔디언을 지정할 수 있는 옵션이 없음 )
 *
 *      --> 그러나 16비트부터는 2바이트이므로 순서가 바뀔 수도 있다
 *
 *      -----------------------------------------------------------
 *      - 구분                  - 개요
 *
 *      - 파라미터               - byteOffset ( offset 바이트 )
 *                             - value ( 설정할 값 )
 *                             - Big-endian , Little-endian
 *
 *      - 반환                  - ArrayBuffer 값
 *      -----------------------------------------------------------
 *
 *      - 사인 부호를 가진 16비트 값을 설정한다
 *
 *      - 파라미터
 *      --> 첫 번째 : DataView 기준의 오프셋 바이트
 *      --> 두 번째 : 설정할 값
 *      --> 세 번째 : 엔디언 , 디폴트 false
 *      --> Big-endian 이면 false 또는 undefined
 *          Little-endian 이면 true
 */
{
    log('------------ setInt16() ---------------');
    const buffer = new ArrayBuffer( 4 );
    const view = new DataView( buffer );
    /**
     *  - littleEndian 타입으로 값을 설정
     *
     *  --> 2 번 인덱스 부터 2바이트 단위( setInt16 )으로 값을 설정
     */
    view.setInt16( 2 , 100 , true );
    /**
     *  - littleEndian 타입으로 값을 view
     */
    log( view.getInt16( 2 , true ) );
    // :: 100
    /**
     *  - bigEndian 타입으로 값을 view
     */
    log( view.getInt16( 2 ) );
    // :: 25600
    debugger;

    // 1. view.setInt16( 2 , 100 , true );
    //    3번째 파라미터에 true 를 작성했으며
    //    리틀-엔디언 타입으로 값이 설정된다

    // 2. view.getInt16( 2 , true );
    //    2번째 파라미터에 true 를 작성했으며
    //    리틀-엔디언 타입으로 값을 반환한다
    //    100이 출력된다

    // 3. view.getInt16( 2 );
    //    2번째 파라미터를 작성하지 않았으며
    //    빅-엔디언 타입으로 값을 반환한다
    //    설정했던 값과 다른 값이 출력된다

    // 4. 따라서 값을 저장한 타입으로 값을 구해야 한다
    /**
     *  - 2 바이트 이상일때, 바이트의 배치 순서가 다르므로
     *    배치 순서에 맞춰서 값을 구해야한다
     *  --> 이것은 TypedArray 에는 없고 DataView 에만 있다
     */
}