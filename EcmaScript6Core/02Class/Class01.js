/**
 * 프로그람 설명문서 주석
 * 2022.02 07 수업
 *
 *      - Class 는 객체지향 프로그라밍의 대명사,
 *        따라서 이에대한 개념을 이해할 필요가 있다
 *
 *           ===== 자바스크립트는 =====
 *
 *		- 객체 지향 프로그라밍 언어
 *	    --> OOP: Object Oriented Programming
 *
 *	    - ECMAScript 스펙에 OOP 라고 작성되어 있다
 *	    --> ECMAScript is an
 *	        object-oriented programming language
 *	    ----> 즉, 자바스크립트의 기반은 OOP 이다.
 *	          기본적인 바탕은 객체지향이다. 따라서, 객체지향의 개념은
 *	          확실히 잡아야 한다.
 */
console.log( "=====================================" );
/**
 *           ===== 객체 구성 요소 =====
 *
 *      - OOP 에서 Object(객체)는
 *      --> 자바스크립트의 Object 가 아니다
 *      ----> 자바스크립트의 Object 는 프로퍼티의 집합이다.
 *            ( 즉, key 와 value 를 가지고 있다 )
 *      --> 개념적, 사상적 접근이다
 *      --> 형체, 실체가 없다
 *
 *      - OOP 에서 행위와 속성으로 객체의 특성을 표현한다
 *
 *      - 행위(Behavior)
 *      --> 먹다, 마시다와 같은 동적인 모습이다
 *
 *      - 속성(Attribute)
 *      --> 밥을 먹다, 물을 마시다의 밥, 물같은
 *          행위의 대상이 속성이다.
 *
 *      ----> 예) A를 변수에 할당한다고 할때 A 가 속성이고,
 *                할당하는 동적인 것이 행위에 속함
 *
 */
"use strict"
// console.log 사용
const { log } = window.console;
/**
 *           ===== 객체의 구체화 =====
 *
 *      - 객체를 코드로 구체화하면
 *      --> 객체는 클래스(Class) 가 된다
 *      --> 행위는 메소드(methods) 가 되며
 *      --> 속성은 프로퍼티(property) 가 된다
 *      ----> 예) 박스에 메소드와 프로퍼티라는 넣는 개념이다
 *                박스라는 실체가 생긴것 === CLass
 *
 *      - 클래스에
 *      --> 메소드와 프로퍼티를 작성한다
 *      --> 클래스 자체로는 사용할 수 없으며
 *      --> 인스턴스로 생성해야 사용할 수 있다.
 *
 *      ========================================
 *      정리하면 OOP 의 객체는 Class 로 구현되고,
 *      그런데 Class 자체는 사용할 수 없고 인스턴스로 사용할 수 있다라는 것
 *      ========================================
 *
 */
{
    "use strict";
    log('------------ 인스턴스 생성 ---------------');
    class Point {
        constructor(point) {
            this.point = point;
        }

        /**
         *  class 안에 작성된것은 메소드다.
         *  - 이것을 알아서 엔진이 prototype 에 연결해 준다.
         */
        getPoint(){
            return this.point;
        }
    };

    const obj = new Point(100);

    log(obj.getPoint());
    // :: 100
    log(obj.point);
    // :: 100
    debugger;
    /**
     *  1. class Point {...}
     *     class 키워드로 클래스를 선언한다
     *     이 시점에서 클래스를 사용할 수 없다
     *
     *  2. const obj = new Point(100);
     *     constructor 가 호출되며 파라미터 값을 넘겨준다
     *     인스턴스를 생성하여 반환하며 obj 에 할당한다
     *     이제 인스턴스로 클래스를 사용할 수 있다.
     *
     *  3. obj.getPoint()
     *     인스턴스의 getPoint() 메소드를 호출한다
     *
     *  4. return this.point
     *     point 는 프로퍼티이다
     *
     *  5. obj.point
     *     obj 인스턴스의 point 프로퍼티 값을 구한다.
     *
     *
     *  ===== 이렇게 OOP 의 객체를 구체화하면 Class 가 된다 =====
     */
}

/**
 *           ===== 자바스크립트로 OOP 구현 =====
 *
 *      - 다른 언어와 OOP 구현 개념은 같지만
 *      --> 클래스 구조와 구현 방법이 다르다
 *      --> prototype 에 메소드를 연결하는 구조
 *          ( 즉, prototype 의 구조는 변하지 않았다 )
 *
 *      ----> ES5 까지는 개발자가 직접 연결해야 했지만
 *            ES6 에서는 엔진이 알아서 연결해준다.
 *
 *      --> 연결된 메소드로 인스턴스 생성
 *
 *      - 따라서 비교하는 것은 의미가 없다
 *      --> 왜냐, 구조가다르고 클래스를 선언하는 형태가 다르기 때문.
 *
 *      - 자바스크립트에 적합한 방법과
 *      --> 자바스크립트 특징을 활용하여
 *      --> OOP 를 구현해야 한다.
 *      ----> 자바스크립트는 기본적으로 prototype 에
 *            메소드를 연결하는 구조. (이것이 특징)
 *
 *      ===== 이 특징에 적합한 방법으로 OOP 를 구현해야 함 =====
 */