/**
 * 프로그람 설명문서 주석
 * 2022.05. 18 수업
 *
 *
 *           ===== 전통적인 모델 =====
 *
 *      - classic( 전통적인 ) 모델
 *      --> Ajax 이전( 2005.02 ) 방법
 *      --> 브라우저에서 서버로 HTTP request 를 보내면
 *      --> 서버에서 모든 것을 처리하여
 *      --> HTML + CSS Data 를 브라우저로 전송
 *      --> 브라우저는 단지 이것을 표시하는 역할
 *
 *      - 모든 것을 서버에서 처리하므로
 *      --> 사용자가 증가하면 서버 처리도 증가
 *      --> 통신 트래픽에도 부하를 준다
 *
 *          ===== Ajax 모델 =====
 *
 *      - <form> 전송 버튼 클릭 등의 UI가 발생하면
 *      --> 자바스크립트가 버튼 클릭을 인식하여
 *          에러 체크 등의 전처리를 수행
 *
 *      ----> 예) UserID 등록 : 이 아이디가 등록되어있는지,
 *                등록되어 있지 않는지 체크는 서버에서 해야한다
 *
 *                데이터베이스와 관계때문에..., 그러나 입력을 했는지,
 *                안했는지에 대한 처리는 브라우저에서 할 수가 있다
 *                ( Ajax 이전에는 이것마저도 서버에서 했다 )
 *
 *      --> Ajax 에서는 form 을 서버로 전송하거나
 *          form 에서 데이터를 추출하여 데이터만 서버로 전송
 *
 *      ----> 데이터만 가니까 통신 트래픽도 줄어들고, 서버도 부가적인,
 *            즉, form 에서 UserId 를 추출하는 처리를 하지 않아도 된다
 *            ( 서버에서 하는 일이 브라우저에서 하니깐 일이 분산이 되는 것 )
 *
 *      - 서버 처리
 *      --> 데이터를 데이터베이스에 저장하는 등의 처리
 *      --> 처리 결과( 데이터 , 값 )를 브라우저로 전송
 *
 *      - 브라우저 처리
 *      --> 서버에서 전송한 데이터를 받아
 *      --> HTML, CSS ,DOM , JavaScript 로 콘텐츠 표현
 *
 *      ----> Ajax engine 안에 XMLHttpRequest 에 대한 처리가
 *            들어가있다
 *            ( 통신을 해야하기 때문에 )
 *      ----> XMLHttpRequest 는 오브젝트이기 때문에, 이것을
 *            컨트롤하는 코드도 필요하다
 *            ( 그것을 Ajax 엔진이라고 표기 )
 */
console.log("=====================================");
// console.log 사용
const { log } = window.console;

/**
 *          ===== MVC 패턴 =====
 *
 *      - MVC
 *      --> Model , View , Control
 *
 *      - Model
 *      --> 비즈니스 로직
 *      ----> 예) UserID 는 반드시 입력해야 한다
 *               라고 한다면 비즈니스 로직!
 *
 *      --> 일반적으로 서버에서 처리하지만
 *      --> 클라이언트에서도 처리( 보안 고려 )
 *      ----> 보안을 요구하는 처리는 번거롭더라도 서버로 보냈다
 *            서버에서 처리 후 결과를 받는 형태를 취해야 함.
 *
 *      - View
 *      --> 콘텐츠 표현, 사용자 인터페이스
 *
 *      - Control
 *      --> Model 과 View 제어
 *      --> 서버와 클라이언트에서 실행
 */

/**
 *         ===== 동기, 비동기 모델 =====
 *
 *      - classic( synchronous ) 모델
 *      --> 브라우저와 서버가 연결된 상태
 *      --> 브라우저 -> 서버 -> 브라우저 사이의
 *          모든 처리가 끝나야 연결이 해제되며
 *          다음 처리를 할 수 있다
 *      --> 사용자가 끝날 때까지 기다려야 한다
 *          ( 서버에서 처리를 하는 시간동안 브라우저는 놀고 있는데,
 *            사용자는 기다려야 한다는 것 )
 *
 *      - Ajax( asynchronous ) 모델
 *      --> 브라우저에서 서버로 전송한 후 연결을 끊는다
 *      --> 연결된 상태가 아니므로
 *          브라우저에서 다른 처리 가능
 *      --> 서버에서 처리 상태( 4단계 )가 발생할 때마다
 *          상태를 브라우저로 전송
 *      --> 전송하면 브라우저에서 이벤트가 발생하며
 *          자바스크립트로 받아 상태를 체크
 *
 *      ----> 4단계가 되면 처리가 완료된 것이므로
 *            서버에서 처리 결과를 보내주게 된다
 *
 *      ----> 예) 브라우저에서 UI 가 발생하면
 *               JS 에서 캐치하여, 서버로 보낼 데이터를 추출하여
 *               Ajax 엔진으로 던진다.
 *
 *               XMLHttpRequest 오브젝트가 서버와 통신을 한다
 *               서버로 데이터를 보내고, 응답을 기다리지 않고 통신을 끊어버린다
 *
 *               서버가 상태를 알려준다. XMLHttpRequest 오브젝트를
 *               JS 로 컨트롤 하여 상태를 체크한다
 *
 *               상태를 알려주면 JS 가 데이터를 받아서 처리하는 개념
 *
 */
{
    log('------------ Ajax ---------------');
    debugger;
}

