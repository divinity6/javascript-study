/**
 * 프로그램 설명문서 주석
 * 2022.01 23 수업
 *
 *
 *           ===== 바이블 강좌 =====
 *
 *		- 자바스크립트 바이블 강좌의 마지막 강좌이다
 *		--> 개설된 "자바스크립트 ES6+ 기본" 강좌와 함께
 *			ES6+ 스펙의 95% 이상을 다룬다
 *		--> 깊고 넓으며 디테일 하다
 *		--> 자바스크립트의 숲, 나무, 가지를 모두 볼 수 있다
 *		--> 처음 접하는 사람은 빠짐없이 배울 수 있으며
 *			경험자는 전체를 정리 할 수 있다
 *
 *		- 특히, 비동기 통신과 비동기 프로세스를 망라하여
 *		--> 프레임워크를 만드는 개념으로 접근
 *		--> 11 단계로 나누어 단계별로 코드를 구현한다
 *		--> 비동기 통신과 비동기 처리를 정리할 수 있다.
 *			( 강좌의 뒷부분에서 다룸 )
 */
console.log( "=====================================" );
"use strict"
// console.log 사용
const { log } = window.console;

/**
 *           ===== 강좌의 상위 레벨 키워드 =====
 *
 * 		- Class
 *
 * 		--> 객체 지향 프로그라밍의 대명사
 *
 * 		- Proxy, Proxy Trap, Reflect
 *
 * 		--> getter 로 값을 구하면 바로 엔진이 처리한다
 *
 * 		--> 그런데 Proxy 가 중간에서 먼저 처리한 후, 엔진에게 넘겨주는 형태
 * 		----> 즉, getter 를 실행하면 Proxy 가 받는 것이다.
 * 			  그리고, 개발자 코드로 무언가를 처리한 후 엔진에게 넘겨주는 것이다.
 *
 * 		--> 그럼으로써 개발자에게 확장성을 부여한 것이다
 * 		----> 바로 엔진이 처리하게 되면 중간에서 무언가를 처리할 수 없기 때문.
 * 			  그러나, Proxy 가 중간에 받아서 처리하게 되니깐
 * 			  확장성이 넓어진 것.
 *
 * 		- Module
 *
 * 		--> 코드의 모듈화, 프로그라밍의 새로운 패턴
 * 		----> 작게 만들어서 필요할 때마다 가져다가 쓰는 것.
 *
 * 		- Promise, async/await
 *
 * 		--> 비동기 실행 환경에서 동기 실행
 * 		----> Promise 는 비동기 실행 환경이다.
 * 			  ( 비동기란 처리가 연결되지 않고 끊어진다라는 것 )
 * 		------> 그렇다면 처리를 하는 것과, 받는 것이 있어야 하는데
 * 				그러다 보니, 순서로 처리하는 것이 어려울 때가 있음.
 *
 * 		------> async/await 은 step by step 으로 처리하는 것.
 * 				앞의 비동기 처리가 끝나야 다음처리를 하게되는 것.
 * 				( 비동기와 동기의 복합체 !! )
 *
 * 		--> 많은 API 의 기반 환경
 *
 * 		--> 자바스크립트 실행의 새로운 패러다임
 * 		----> API 들이 대부분 Promise 기반 환경이라는 것.
 *
 * 		- ArrayBuffer, TypedArray, DataView
 *
 * 		--> 이것들은 Number 타입의 데이터를 바이너리(2진법)로 처리
 *
 * 		--> WebGL(청크 데이터), 머신러닝/딥러닝의 이미지 처리에 필수
 * 		----> 그렇지 않고서는 처리속도가 떨어져서 머신러닝/딥러닝을 할 수가 없다.
 *
 * 		- Web Workers, SharedArrayBuffer, Atomics
 *
 * 		--> 멀티 스레드 환경의 병렬 처리
 *
 * 		----> Promise 는 병행처리다.
 *		------> 비동기로 처리하지만, 그것은 스레드가 하나이다.
 *			   Web Workers 와 SharedArrayBuffer, Atomics 를
 *			   사용하면 멀티 쓰레드를 사용할 수 있다라는 것.
 *			   ( 브라우저에서 쓰레드를 다수 만들 수 있다라는 것 )
 *
 *		----> 사양이 받쳐주지 않으면 무리가 가지만, 과거의 컴퓨터와
 *			  현재의 컴퓨터 처리속도를 보면 엄청나게 발전했다.
 *			  따라서, 미래의 처리속도를 보면 틀림없이 !병렬 처리!를 하게된다.
 *			  ( 지금도 사양을 좋게하면 다수의 쓰레드를 할 수는 없지만
 *				몇개의 쓰레드를 충분히 사용할 수 있다. )
 *
 *		------> 이것은 프로그라밍 기법의 다른 방향을 제시하고 있는 것이다.
 *
 * 		--> 동기 실행으로는 멀티 스레드 처리 불가
 * 			( 동기 3개가 동시에 돌아갈수가 없지 않는가? )
 * 			비동기 실행이 필요하다
 *
 * 		----> Promise 가 나온 또하나의 이유.
 * 			  멀티 스레드 에서 하려고 하니깐 비동기 실행이 필요한것.
 * 			  던져주고 빠져나와야함. 그래야 다른 쓰레드를 제어할 수 있음.
 * 			  그리고 그 쓰레드에서 처리가 끝나면 호출한 곳으로 값을 돌려주는 형태
 *
 * 		--> Web Workers 를 SharedArrayBuffer 에서 사용
 * 		----> Web Workers 는 자바스크립트 스펙 범위가 아니지만
 * 			  SharedArrayBuffer 와 Atomics 에서 이것을 사용한다.
 *
 * 		- Ajax, XMLHttpRequest, Fetch
 * 		--> 비동기 통신
 * 		--> 비동기 통신과 비동기 처리의 연결을 위해
 * 			Ajax, XMLHttpRequest 를 포함시켰다.
 *
 */

/**
 *           ===== 비동기 11 단계 =====
 *
 *		- 비동기 통신과 비동기 프로세스를
 *		--> 11단계로 나누어 단계별로 코드 구현
 *
 *		- 11 단계
 *		--> XMLHttpRequest 비동기 통신
 *			( 가장 기본이 되는 것 )
 *
 *		--> Promise 로 비동기 실행
 *
 *		--> 비동기 통신 + 비동기 실행, 함수로 분리
 *			( 비동기 통신과 비동기 실행을 묶는 것 )
 *		----> 프레임워크 개념으로 접근하려 하니깐,
 *			  실행할때마다 코드를 작성하는 것이아니라
 *			  하나의 함수로 분리하는 것이다.
 *
 *		--> 비동기로 다수의 파일 수신
 *		----> 이렇게 분리를 시켜놓고 비동기와 비동기 통신으로 다수의 파일을 수신
 *			  ( 앞의 단계까지는 하나로 실행한 것 )
 *		------> 다수의 파일을 수신하다 보니깐, 동기 실행이 필요한 것
 *				예) 세개를 통신하게 될때 3개를 다 던져버리면
 *				   비동기 통신은 1, 2, 3순서가 보장이 되지 않는다.
 *				   순서적으로 처리가 필요할때는 동기처리를 해야한다.
 *
 *				   그러나 background 는 비동기 통신이고...
 *
 *		--> 비동기 통신 + async/await
 *		----> 그럴때 사용하는 것이 async/await 이다.
 *
 *		--> this 참조, 서버로 데이터 전송
 *		----> 또한, 비동기 통신을 하게되면, 통신이 끊어지기 때문에
 *			  this 참조를 잊어버린다.
 *
 *		----> 이런 처리가 정리가 되면
 *
 *      ----> 지금까지는 가져오는 것만 했는데 위에서 분리한 함수에
 *            서버에 전송하는 방법을 하나씩, 하나씩 추가하는 것.
 *
 *		--> 이벤트 핸들러 함수 분리
 *		----> 서버에서 데이터를 가져올 때마다 이벤트가 발생한다.
 *			  이벤트가 발생하게 되면, 통신이 제대로 되었는지,
 *			  데이터가 온것을 파싱을 시켜야한다.
 *
 *		----> 함수하나에다가 다 넣는 것은 무리이기 때문에 분리시키는 것.
 *			  그런데 분리시키면 잊어버리게 되는 것
 *
 *		--> 이벤트 핸들러 바인딩
 *		----> 따라서 바인딩을 시켜야 하는 것.
 *
 *		--> Fetch
 *		----> 강력한 비동기 통신의 API 이다.
 *			  자바스크립트에서 만든것은 아니고,
 *			  자바스크립트에서 사용할 수 있도록, new 연산자로 사용하는 것이 아니라
 *			  함수로 부르면 API 가 실행되는 형태로 브라우저에 탑재되어 있음.
 *
 *		===== 이런것들이 자바스크립트가 나아가야할 방향이다 =====
 *
 *		-- new 연산자로 인스턴스를 만드는 것도 괜찮지만,
 *		   자바스크립트 엔진과 완전하게 인터페이스를 만든 형태가 되는 형태.
 *
 */