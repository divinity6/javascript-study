/**
 * 프로그램 설명문서 주석
 * 2021.08 19 수업
 *
 *
 *           ===== Object 오퍼레이션 =====
 *
 *      - 같은 프로퍼티 이름 사용
 *
 *      - Shorthand property names
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const log = window.console.log;

{
    "use strict"
    log('------------ 같은 프로퍼티 이름 사용 ---------------');
    const value = {book: 10, book: 20};
    log(value);
    // :: book : 20

    debugger;

    // 1. { book: 10, book: 20 } 에서
    //    프로퍼티 이름인 book이 같다.

    // 2. ES5 strict 모드에서
    //    프로퍼티 이름이 같으면 에러가 난다.

    // 3. ES6에서는 strict 모드에 관계없이
    //    에러가 발생하지 않는다.
    //    뒤에 작성한 프로퍼티 값으로 대체된다.

}

{
    "use strict"
    log('------------ Shorthand property names ---------------');
    const one = 10, two = 20;
    const values = {one, two};
    log(values);
    // :: { one : 10, two : 20 }

    debugger;

    // 1. one과 two 변수에 값을 작성하였으며

    // 2. { one, two} 형태로 values에 할당한다

    // 3. one이 프로퍼티 이름이 되고
    //    10이 프로퍼티 값으로 할당된다

    // 4. "Shorthand property names"는
    //    MDN에 작성된 것으로
    //    스펙에 정의된 것은 아니다.
}

/**
 *           ===== 프로퍼티 이름 조합 =====
 *
 *      - 문자열을 프로퍼티 이름으로 사용
 *
 *      - 변숫값을 프로퍼티 이름으로 사용
 *
 *      - 분할 할당을 조합한 형태
 *
 */

{
    "use strict"
    log('------------ 문자열을 프로퍼티 이름으로 사용 ---------------');
    const value = {
        // 문자열을 조합해서 사용가능(ES5에서도 사용가능)
        ["one" + "two"]: 12
    };
    log(value.onetwo);
    // :: 12

    debugger;

    // 1. []안에 문자열로 이름을 작성한다.

    // 2. "one"과 "two"를 연결하여
    //    onetwo를 프로퍼티 이름으로 사용한다.

}

{
    "use strict"
    log('------------ 변숫값을 프로퍼티 이름으로 사용 ---------------');
    const item = "world";
    const sports = {
        ["test"] : 10,
        [item]: 100,
        // 프로퍼티 이름사이에 공백이 있음
        [item + " Cup"]: "월드컵",
        [item + "Sports"]: function () {
            return "스포츠";
        }
    };
    log(sports["test"], sports.test);
    // :: 10 , 10

    // 아 변수이름으로 사용하면 []안에다가 넣어야하네네
   log(sports[item], sports.item);
    // :: 100 , undefined

    log(sports[item + " Cup"]); // ==> world Cup
    // :: "월드컵"

    log(sports[item + "Sports"]());
    // :: "스포츠"
    debugger;

    // 1. 변숫값을 프로퍼티 이름으로 사용한다.

    // 2. 변숫값과 문자열을 연결할 수 있다.

    // 3. 프로퍼티 이름에 공백이 있는 것이 어색하지만
    //    공백을 넣을 수도 있다.

    // 4. 함수로 호출할 수 있다.
    //    변숫값에 따라 함수 이름을 정의할 수 있다.

}
/**
 *    - 위의 식에서 sports[item]으로 값을 구하면 100이 반환된다.
 *      [[ 대괄호 안에 변수이름을 작성해야 한다!! ]]
 *
 *    --> sports.item으로 하게되면 item을 문자열로 간주하게 때문에
 *        undefined가 출력된다.(변수로 사용했기 때문에 문자열로 간주)
 *
 *    - 함수로 호출할수 있는 것이 굉장히 유용하다.
 *
 *    --> [item + "Sports"]: function () {}
 *        이형태는 자주 사용한다.
 *
 *    ----> 왜냐하면 앞에서 함수이름을 부르려고할때,
 *          조건에 따라 부르면 코드가 지저분해진다.
 *
 *          그러나 변수에 값을 할당하고 부르면 코드가 깨끗해진다.
 *
 *    ----> 즉, 이렇게하면서 자바스크립트의 유연성을 확보하고,
 *          스크립트언어의 장점을 활용할 수 있다.
 *
 *    - 조건에 따라서 함수를 코드로 부르는 것이 아니라!
 *      [[조건 값에 따라서 함수를 부르는 개념!!]]
 *
 *    --> 유연성도 좋고 코드가 깨끗하게 작성된다 (확장성이 있음)
 */

{
    "use strict"
    log('------------ 분할 할당을 조합한 형태 ---------------');
    const item = "book";
    // {book} 은 [item] 즉, "book"과 같은것.
    // 오브젝트의 프로퍼티는 문자열로 저장되기 때문(단지 보이는것만 문자열이아닐뿐)
    const result = {[item]: title} = {book: "책"};
    log(result);
    // :: { book : 책 }
    debugger;

    // 1. 변숫값을 프로퍼티 이름으로 사용하고
    //    분할 할당한 형태다.

    // 2. { [item] : title }
    //    { book : title } 형태가 된다.

    // 3. { book : "책" }
    //    { book : title }에 "책"이 할당된다.
}

/**
 *      - 위의 형태도 매우 유용하게 사용할 수 있다.
 *      --> 가변적으로 프로퍼티 이름을 사용할 수 있다라는 것!
 *          (유연성이 굉장히 높다)
 *
 *      --> 기존에는 [item]이 문자열이여서 어려웠다.
 *
 *      ----> 그런데 지금은 변수값으로써 프로퍼티 이름을
 *            사용할 수 있게 되기 때문에 유연성이 높아졌다.
 */




























