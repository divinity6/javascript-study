/**
 * 프로그램 설명문서 주석
 * 2022.01.18 수업
 *
 *           ===== Set 오브젝트 =====
 *
 *      - Set 오브젝트는
 *      --> value(값)의 컬렉션
 *
 *      - [value1,,, valueN] 형태로 배열 안에 작성
 *      --> Set 은 대괄호[]가 하나
 *      ----> Map 은 대괄호[[]]가 2개인것과의 차이
 *
 *      - 작성한 순서로 전개 된다.
 */

console.log("====================================");
"use strict"
// console.log 사용
const {log} = window.console;
{
    "use strict"
    log('------------ Set 오브젝트 ---------------');
    const obj = new Set([1, 2, "ABC"]);
    log(`size : ${obj.size}`);
    debugger;

    /**
     *  Set 인스턴스는 for-of 문으로 전개 가능
     */
    for (let value of obj){
        log(value);
        // :: 1
        // :: 2
        // :: "ABC"
    }
    debugger;
    /**
     *  - Map 오브젝트와 Set 오브젝트의 차이는 크지 않다.
     *  --> 그러나 value 만 작성한다는 특징이 있기때문에
     *      나름의 특징이 있다.
     */
}
/**
 *           ===== new Set() =====
 *
 *    -----------------------------------------------------------
 *     - 구분                - 데이터(값)
 *     - 형태                - new Set()
 *     - 파라미터             - 값,opt
 *     - 반환                - 생성한 Set 인스턴스
 *     -----------------------------------------------------------
 *
 *     - Set 인스턴스 생성, 반환
 *     --> 파라미터에 값을 작성
 *     --> 프리미티브, 오브젝트 타입 사용 가능
 *
 *     - size 프로퍼티
 *     --> Set 인스턴스의 엘리먼트 수를 반환
 *
 *     - Set 오브젝트 구조
 */

{
    "use strict"
    log('------------ Set 인스턴스 생성 ---------------');

    const obj = new Set([
        1, 2, 1,[],{}
    ]);
    /**
     * 같은 값을 설정하지 않네~~
     */
    log(`size : ${obj.size}`);
    // :: 4
    for(let value of obj){
        log(value);
        // :: 1
        // :: 2
        // :: []
        // :: {}
    }
    debugger;

    // 1. 같은 값이 있으면, 첫 번째의 1을 유지하며
    //    세 번째의 1을 설정하지 않는다

    // 2. Same-Value-Zero 비교 알고리즘으로 비교

    // 3. obj.size
    //    세 번째의 1이 설정되지 않으므로 값은 4
    /**
     * ===== 배열은 값을 체크하지 않는다. 그러나 Set 오브젝트는
     *       값을 체크해서 같은 값이있으면 설정하지 않는다     =====
     */
}

{
    "use strict"
    log('------------ Set 오브젝트 구조 ---------------');

    debugger;

    const set = Set;
    /**
     *  1. Set 오브젝트에 Symbol(Symbol.species) 가 있다
     *  -  따라서, constructor를 오버라이드 할 수 있다.
     *
     *  2. prototype 을 펼치면 Symbol.iterator 가 있다
     */
    debugger;

    const obj = new Set([
        "one" , "two"
    ]);
    /**
     *  1. 오른쪽의 obj 를 펼치면 [[Entries]] 가 있다
     *
     *  2. [[Entries]] 를 펼치면 0 : "one" 형태이다
     *
     *  3. 인덱스를 부여하여 key로 사용하고
     *  -  "one", "two"를 value로 설정한다
     *
     *  4. 인덱스를 부여하는 구조는 Map 과 같다.
     *
     *  5. 인덱스를 부여하여 저장하므로 작성한 순서로 읽힌다.
     */
    debugger;

    /**
     *  - 여기서 value("one")이 값이지만 key 이기도 하다
     *  --> 왜냐하면 중복되는 것들을 체크해서 제외하기 때문에 그렇다.
     *
     *
     *  * Set 오브젝트의 특징
     *  =======================================================
     *      즉 ,Set 오브젝트는 배열의
     *      index 개념과 ( 순서대로 작성되는 것)
     *      Map 오브젝트의 key 개념을 ( 값이 중복되면 나중에 것이 제외됨 )
     *      가지고 있다
     *  =======================================================
     */
}

/**
 *           ===== Set 과 Map 비교 =====
 *
 *      - 저장 형태
 *      --> Map: key 와 value 작성
 *          key 를 key 로 사용하여 [key, value] 로 저장
 *      --> Set: value 만 작성
 *          value 를 key 로 사용하여 [value]로 저장
 *          ( 값이 중복되지 않음 )
 *
 *      - 값을 구하는 형태
 *      --> Map: get(key) 형태로 value 를 구할 수 있다
 *      --> Set: get() 메소드가 없다
 *          값 하나를 구할 수 없다
 *          반복으로 값을 구하거나 이터레이터 사용
 *
 *      ----> Set 오브젝트에서 key 는 value 가 중복되지 않는 개념이지,
 *            value 로 값을 콕집어내는 개념은 아니다라는 뜻
 *      ----> 반복하면서 있는것을 쭉~ 읽어내는 개념.
 *
 *      -- 이것이 Set 과 Map 의 차이이다.
 */