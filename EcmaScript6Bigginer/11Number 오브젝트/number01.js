/**
 * 프로그램 설명문서 주석
 * 2021.08 30 수업
 *
 *           ===== IEEE 754 =====
 *
 *      ****** 이번 챕터는 영상을 보면서 해야 이해가 된다 ******
 *
 *      - IEEE(institute of Electrical and Electronics Engineers)
 *
 *      - 자바스크립트는 IEEE 754에 정의된
 *      --> 64비트(bit) 부동 소수점으로 수(number)를 처리
 *      ----> double-precision floating-point
 *            format numbers
 *
 *      --> 64비트로 최솟값과 최댓값을 처리
 *      ----> 0을 처리할때도 64비트, 1억을 처리할때도 64비트
 *
 *      ------> 0을 처리하는데 64비트를 사용하는 것은 효율이 떨어지지 않는가?라는 의문도 있다.
 *      ------> 한편, ES6에 Typed Array 오브젝트라는 것이 있다.
 *              이것은 개발자가 8bit, 16bit 같이 사용할 bit수를 정의할 수 있다.
 *
 *      --------> 그럼으로써 메모리 효율을 높일 수 있다.
 *
 *
 *      - 자바스크립트는 정수와 실수를 구분하지 않음
 *      --> 1을 1.0으로 처리
 *      --> 1과 1.2를 더할 수 있음
 *
 *      ----> 정수는 정수끼리, 실수는 실수끼리만 연산이 가능한 언어도 있다.
 *      ----> 전부 나름대로 장,단점이 있다.
 *
 *      ------> 1과 1.0을 더하면 계산하긴 편하지만 ,
 *              그러나 실수가 들어가면 실수처리를 위한 부분이 들어가게된다.
 *
 *      ------> 정수와 정수끼리만 더하면 메모리를 사용하는 bit수를 줄일 수 있다.(효율적)
 *      ------> 물론 트레이드오프도 있기때문에 자바스크립트 특징에 맞게 사용하는 것이 베스트
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const log = window.console.log;

/**
 *           ===== 64비트 구성 =====
 *
 *      - 사인비트
 *      --> 63: 1비트
 *      --> 값이 0이면 양수, 1이면 음수
 *
 *      - 지수(exponent)
 *      --> 52~52: 11비트
 *
 *      - 가수(fraction)
 *      --> 0 ~ 51: 52비트 + 1(사인비트):53 비트
 *
 *
 *      --> 64비트는 사인비트와 지수, 가수로 구성되어 있다.
 *      ----> (sign)사인은 63번째의 1비트를 사용한다.
 *      ----> 값이 0이면 양수고, 1이면 음수이다.
 *      ------> 따라서 사인이다.
 *      ------> 예) -0과 +0은 사람이 볼때는 차이가 없다.
 *                  그러나 엔진관점에서 보면 차이가 있는 것이다.
 *
 *                  나머지 값이 전부 0이고 sign만 1이면, 이것은 -0.
 *                  spec에서는 -0과 +0을 구분하고 있다.
 *
 *      --> 지수는 52 ~ 62까지 11비트를 사용한다.
 *      ----> 이렇게 11비트를 사용해서 지수를 표현한다.
 *
 *      --> 가수는 0 ~ 52까지 우리가 일반적으로 사용하는 숫자를 표시
 *      ----> 그런데 이것은 사인(sign)비트를 포함해야 한다.
 *      ----> 따라서, 53비트를 사용하게 된다.(52bit + 1bit(signbit))
 *
 */

/**
 *           ===== 값을 구하는 방법 =====
 *
 *      - 비트 값은 0 아니면 1
 *      ----> 2가 나올 수가 없다. 따라서,
 *
 *      - 2의x승 값을 더해 값을 구한다
 *      --> 0 비트 부터 1, 1, 1 이면
 *      --> 1(2**0) + 2(2**1) + 4(2**2) = 7;
 *          (지수가 증가하는 방식)
 *      
 *      ----> 예) 오른쪽 끝이 0비트이다.
 *            0,1,2 이런식으로 쭉~ 나가게 된다.
 *            0비트부터 쭉나가는데 값이 1,1,1이라고 가정하겠다.
 *            2의 0승은 1이고, 2의 1승은 2이고 2의 2승은 4이기 때문에
 *            ( 지수 법칙에서 2의 0승은 1이다 )
 *            그 값은 7이다.
 *
 *      ------> 자바스크립트는 이와같은 방법으로 값을 구한다
 *
 *
 *      --> 만약에 1,0,1이라면
 *      --> 1 + 0 + 4 = 5 가 될 것이다
 *
 *      --> 또 1, 1 , 0이라면
 *      --> 1 + 2 + 0 = 3 이 되겠네.
 *
 *      ----> 아, 그럼 52~62비트사이의 지수(exponent)는 가수(fraction)에서 나온 값들의
 *            지수를 구하는 방식인가 부다
 *
 *      ------> 노노 가수와 소수점의 위치를 풀이하는 수가 지수임!
 *
 */

/**
 *           ===== Number 상수 =====
 *
 *      - 상수 이름                     - 상수 값
 *      - Number.MAX_SAFE_INTEGER      - 9007199254740991 (2의 53승 - 1)
 *      - Number.MIN_SAFE_INTEGER      - -9007199254740991 (-(2의 53승 - 1))
 *      
 *      - safe integer란
 *      --> 지수(e)를 사용하지 않고 나타낼 수 있는 값
 *      --> 즉,2의 64승이 아닌 2의 53승
 *      
 *      ----> 즉, 가수(fraction)부분이 SAFE_INTEGER 부분
 *            거기에다가 sign 비트를 추가시킨 것
 *            
 *      ------> 지수를 사용하지 않아서 SAFE_INTEGER 인가ㅋㅋ
 *      
 *      - Number.MAX_SAFE_INTEGER
 *      --> safe integer 최댓값
 *      
 *      - Number.MIN_SAFE_INTEGER
 *      --> safe integer 최솟값
 *
 */
{
    "use strict"
    log('------------ safe integer 최댓값 ---------------');
    log(Number.MAX_SAFE_INTEGER);
    // :: 9007199254740991
    
    // Math.paw(x,y) ===> x의 y승 값을 반환
    log(Math.pow(2, 53) - 1);
    // :: 9007199254740991
    debugger;
    
    // 1. 값이 같다
}

{
    "use strict"
    log('------------ safe integer 최솟값 ---------------');
    log(Number.MIN_SAFE_INTEGER);
    // :: -9007199254740991

    log(-(Math.pow(2,53) - 1));
    // :: -9007199254740991
    debugger;

    // 1. 값이 같다
}



















