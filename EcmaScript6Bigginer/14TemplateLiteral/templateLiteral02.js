/**
 * 프로그램 설명문서 주석
 * 2021.10.17 수업
 *
 *           ===== Tageed Template =====
 *
 *      - tagged Template
 *      --> 템플릿에 함수 이름을 작성한 형태
 *
 *      - 호출되는 함수를
 *      --> 태그 함수(tag function)라고 부른다
 *
 *      - show() 함수를 호출하면서
 *      --> 문자열을 배열로 파라미터로 넘기고
 *      --> 표현식 결과를 하나씩 파라미터로 넘김
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const {log} = window.console;

{
    "use strict"
    log('------------ tagged Template ---------------');
    const one = 1, two = 2;
    /**
     *  마지막에 빈 문자열을 엘리먼트로 추가함
     */
    const show = (text, value) => {
        debugger;
        log(`${text[0]}${value}`);
        // :: 1 + 2 = 3
        log(text[1]);
        // :: ""
    };

    // 이렇게 호출되는 함수를 tag 함수라고 부른다.
    /**
     *  - 또한, 문자열을 배열로 파라미터로 넘기고,
     *  - 표현식 결과를 하나씩 파라미터로 넘긴다.
     *
     *  ===== 따라서 문자열 배열은 엘리먼트가 2개가 된다 =====
     */
    show`1 + 2 = ${one + two}`;
    // show`1 + 2 = ${one + two} 추가된 문자열`;
    debugger;

    // 1. Template에서 문자열과 표현식을 분리한다

    // 2. "1 + 2 = "가 문자열이고
    //    ${ one + two }가 표현식이며 평가하면 3이 된다

    // 3. show() 함수를 호출한다.

    // 4. 문자열을 배열로 넘겨준다.
    //    왼쪽에서 오른쪽으로 배열 엘리먼트로 추가
    //    마지막에 빈 문자열을 엘리먼트로 추가

    // 5. 표현식은 평가 결과를 넘겨준다

    // 6. log(text[1])
    //    호출하는 함수에서 넘겨 준 빈 문자열
    //    text[1]이 없으면 undefined가 출력된다.

    /**
     *  - 문자열에서 빈문자열을 넘겨주지 않아도 템플릿에서 자동을 빈문자 배열을 넘겨준다.
     */
}

/**
 *
 *
 *           ===== Tagged Template =====
 *
 *      - 호출하는 곳에서
 *      --> 표현식을 평가한 값을 다수 넘겨줄 때
 *      --> 태그 함수에 대응하는
 *          파라미터 이름을 작성한 형태
 *
 *      - 문자열을 분리하면
 *      --> ["1+2=", "이고 1-2=", "이다"]
 *      --> 3개의 배열 엘리먼트가 된다
 *
 *      - 표현식을 분리하면
 *      --> ${one + two}와 ${one - two}
 *      - show 태그 함수를 호출
 */

{
    "use strict"
    log('------------ tagged Template ---------------');
    const one = 1, two = 2;
    const show = (text, plus, minus) => {
        debugger;
        log(`${text[0]}${plus}`);
        // :: 1+2=3
        log(`${text[1]}${minus}`);
        // :: 이고 1-2=-1
        log(`${text[2]}${text[3]}`);
        // :: 이다undefined
    };

    /**
     * - 여기서 show 함수를 호출하면서 template의 평가 결과를 넘겨준다
     * - 그런데 끝에 문자열이 있으면 빈 문자열을 넘겨주지 않는다.
     */
    show`1+2=${one + two}이고 1-2=${one - two}이다`;
    debugger;

    // 1. text 파라미터는
    //    ["1+2-" , "이고 1-2=", "이다"]
    //    끝에 문자열이 있으면
    //    4번째에 빈 문자열이 설정되지 않는다.

    // 2. plus 파라미터는 3

    // 3. minus 파라미터는 -1
}

/**
 *
 *
 *           ===== Tagged Template =====
 *
 *      - 태그 함수에 Rest 파라미터 작성
 *
 *      - 문자열을 분리하면
 *      --> ["1+2=","이고 1-2=","이다"]
 *      --> 3개의 배열 엘리먼트가 된다
 *
 *      - 표현식을 분리하면
 *      --> ${one + two}와 ${one - two}
 *      --> [3, -1]
 *
 *      - show 태그 함수를 호출
 */
{
    "use strict"
    log('------------ Rest 파라미터 사용 ---------------');
    const one = 1, two = 2;
    const show = (text, ...rest) => {
        debugger;
        log(`${text[0]}${rest[0]}`);
        // :: 1+2=3
        log(`${text[1]}${rest[1]}${text[2]}`);
        // :: 이고 1-2=-1이다
    };

    show`1+2=${one + two}이고 1-2=${one - two}이다`;
    debugger;

    // 1. text 파라미터는
    //    ["1+2=", "이고 1-2=", "이다"]

    // 2. rest 파라미터는 [3,-1]
}

/**
 * - 이처럼 tag함수에 rest 파라미터를 사용하여 text가 배열로 만들어진것과 같은 배열로 만들 수 있다.
 */