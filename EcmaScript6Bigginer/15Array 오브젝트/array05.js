/**
 * 프로그램 설명문서 주석
 * 2021.11.15 수업
 *
 *           ===== fill() =====
 *
 *      -----------------------------------------------------------
 *      - 구분                    - 데이터(값)
 *
 *      - 형태                   - Array.prototype.fill()
 *      - 파라미터                - 설정할 값
 *                              - 시작 인덱스opt
 *                              - 끝 인덱스opt
 *      - 반환                   - 변경된 Array 오브젝트
 *      -----------------------------------------------------------
 *
 *      - 범위 값을 지정한 값으로 설정, 반환
 *
 *      - 설정 방법
 *      --> 시작 인덱스부터 끝 인덱스 직전까지
 *      --> 첫 번째 파라미터 값으로 설정(대체);
 *
 *      ----> 채운다는 것보다 설정, 대체라는 어휘가  fill()에 더알맞음
 *
 *      - Generic 함수
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const {log} = window.console;

{
    "use strict"
    log('------------ 시작 인덱스 작성 ---------------');
    const list = ["A", "B", "C"];
    list.fill("책", 1);
    log(list);
    // :: ['A', '책', '책']
    debugger;

    // 1. 시작 인덱스를 작성하고
    //    끝 인덱스를 작성하지 않으면

    // 2. 시작 인덱스부터 끝까지가 대체 대상

    // 3. 첫 번째 파라미터 값인 "책"으로 대체한다.
}
{
    "use strict"
    log('------------ 끝 인덱스 작성 ---------------');
    const list = ["A", "B", "C", "D"];
    list.fill("책", 1, 3);
    log(list);
    // :: ['A', '책', '책', 'D']
    debugger;

    // 1. 끝 인덱스를 작성하면

    // 2. 시작 인덱스부터 끝( 인덱스 - 1 )까지가 대체 대상
}
{
    "use strict"
    log('------------ 시작과 끝 인덱스 미작성 ---------------');
    const list = ["A", "B", "C"];
    list.fill("책");
    log(list);
    // :: ['책', '책', '책']

    debugger;
    // 1. 시작 인덱스와 끝 인덱스를 작성하지 않으면 전체가 대체 대상.
}

/**
 *  이것은 Generic 함수
 */

{
    "use strict"
    log('------------ Generic ---------------');
    const like = {0: 'A', 1: 'B', 2: 'C', length: 3};
    log(Array.prototype.fill.call(like, "책", 1));
    // :: { 0 : 'A' , 1: '책', 2: '책'. length: 3};
    debugger;

    // 1. Array-like를 사용하여 대체 처리
}

/**
 *
 *           ===== includes() =====
 *
 *      -----------------------------------------------------------
 *      - 구분                    - 데이터(값)
 *
 *      - 형태                   - Array.prototype.includes()
 *      - 파라미터                - 비교하려는 값
 *                              - 비교 시작 인덱스opt, 디폴트 : 0
 *      - 반환                   - true : 있음, false : 없음
 *      -----------------------------------------------------------
 *
 *      - 대상 배열에
 *      --> 첫 번째 파라미터 값이 있으면 true,
 *          없으면 false를 반환
 *
 *      --> 두 번째 파라미터는 선택이며 비교 시작 인덱스 작성
 *
 *      - 제너릭 함수
 *
 */
{
    "use strict"
    log('------------ 포함 여부 반환 ---------------');
    const list = [10, 20, 30];
    log(list.includes(10));
    // :: true

    log(list.includes(50));
    // :: false

    log(list.includes(10, 1));
    // :: false

    debugger;

    // 1. 10이 있지만
    //    1번 인덱스부터 비교하므로 false 반환

    // 2. 두 번째 파라미터에 음수를 작성하는 등의
    //    값을 작성할 때의 처리는 MDN을 참조
}

{
    "use strict"
    log('------------ 제너릭 ---------------');
    const like = {0: 10, 1: 20, 2: 30, length: 3};
    log(Array.prototype.includes.call(like, 20));
    // :: true
    debugger;
}