/**
 * 프로그램 설명문서 주석
 * 2021.11.23 수업
 *
 *           배열 차원 변환(ES2019 부터 지원)
 *
 *           ===== flat() =====
 *
 *      -----------------------------------------------------------
 *      - 구분                    - 데이터(값)
 *
 *      - 형태                    - Array.prototype.flat(), ES2019
 *      - 파라미터                 - 대상 깊이(대상 배열 차원) opt, 디폴트 : 1
 *      - 반환                    - 새로운 배열
 *      -----------------------------------------------------------
 *
 *      - 배열 차원을 변환하고 새로운 배열로 설정하여 반환
 *      --> 파라미터의 대상 깊이에 따라 변환이 다름
 *
 *      - 파라미터에 0을 작성한 경우
 *
 *      - 파라미터에 1보다 큰 값을 작성
 *
 *      - 빈 엘리먼트를 삭제
 *
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const {log} = window.console;

{
    "use strict"
    log('------------ 디폴트 값 + 1 ---------------');
    const list = [1, 2, [3, 4]];
    // @param : depth
    const result = list.flat();
    log(result);
    // :: [1, 2, 3, 4]
    log(list);
    // :: [1, 2, Array(2)]

    debugger;

    // 1. flat() 파라미터에 값을 작성하지 않았으며
    //    디폴트 값은 1이다

    // 2. 파라미터에 1을 더하면 2차원이 되며
    //    2차원까지를 엘리먼트(배열을 벗겨내는 것)로 변환한다

    // 3. [1, 2]는 1,2가 되며
    //    [[3, 4]]도 3, 4가 된다

    // 4. 변환할 엘리먼트를
    //    새로운 배열에 설정하여 반환한다
    //    따라서 1차원 배열의 엘리먼트로 설정된다

    // 5. flat() 대상인 list 배열은 바뀌지 않는다.
}

{
    "use strict"
    log('------------ 파라미터에 0을 작성 ---------------');
    const list = [1, 2, [3, 4]];
    log(list.flat(0));
    // :: [1, 2, Array(2)]

    debugger;

    // 1. 파라미터 값 0에 1을 더하면 1이다

    // 2. [1 ,2]는 1,2가 되며
    //    배열에 설정하여 반환하므로 [1, 2]가 된다

    // 3. [[3, 4]]는 [3,4]가 되며
    //    배열에 설정하여 반환하므로 [[3, 4]]가 된다.

    /**
     *  즉, 파라미터에 0을 작성하면 flat되지않고 그대로 반환한다.
     */
}

{
    "use strict"
    log('------------ 파라미터에 1보다 큰 값 작성 ---------------');
    const list = [1, 2, [3, 4, [5, [6]]]];
    // 파라미터에 1을 더한 3차원까지 엘리먼트로 변환
    // 이것을 전부 flat 시킴
    log(list.flat(2));
    // :: [1, 2, 3 ,4 ,5, [6]]

    debugger;

    // 1. 파라미터에 1을 더한 3차원까지
    //    엘리먼트로 변환하므로 [[[5]]]까지 변환한다

    // 2. 4차원인 6은 4차원에서 3차원을 빼면 1차원이 된다.
    //    즉, [6]으로 변환횐다
    //    배열에 설정하여 반환하므로 [[6]]이 된다.

    /**
     *  깊이를 얼마나 주느냐에 따라 flat 범위가 달라진다
     */
}
/**
 *  - flat 메소드에다 10을 줬다. 그럼 10차원까지가 전부 flat된다.
 *
 *  - 이것을 flat 개념이라고 한다.
 *  --> flat는 일반적으로 사용되는 software 용어 개념이다
 *  --> 그만큼 많이 사용한다
 *  --> 특히, 머신러닝에서는 필수적인 개념이다.
 */

{
    "use strict"
    log('------------ 빈 엘리먼트를 삭제 ---------------');
    const list = [1, 2, , , , [3, 4]];
    log(list.length);
    // :: 6
    const change = list.flat();
    log(change);
    // :: [1, 2, 3, 4]
    log(change.length);
    // :: 4

    debugger;
    // 콤마로 작성한 undefined는 flat 메소드에서 제외시킨다.
    // 값이 있는 것만 반환한다.
}

/**
 *
 *           ===== flatMap() =====
 *
 *      -----------------------------------------------------------
 *      - 구분                    - 데이터(값)
 *
 *      - 형태                    - Array.prototype.flatMap(), ES2019
 *      - 파라미터                 - 콜백 함수
 *                               - 콜백 함수에서 this로 참조할 오브젝트opt
 *      - 반환                    - 새로운 배열
 *      -----------------------------------------------------------
 *
 *      - flat()와 기본 기능은 같다
 *
 *      - 배열을 반복하면서 콜백 함수 호출
 *      --> 파라미터 : 엘리먼트, 인덱스, 배열 형태
 *      --> 콜백 함수에서 반환한 값을 배열로 반환
 *
 *      - map()과 차이
 */

{
    "use strict"
    log('------------ flatMap() ---------------');
    const list = [10, 20];
    const cb = (element, index, all) => {
        return element + 5;
    };

    log(list.flatMap(cb));
    // :: [15, 25]
    log(list.map(cb));
    // :: [15, 25]

    // 똑같넹...

    debugger;

    // 1. 콜백 함수에서 파라미터로 넘겨준 값을
    //    단지 값만 변경하여 반환하면

    // 2. map()과 flatMap()의 차이가 없다.

}

{
    "use strict"
    log('------------ map()과의 차이 ---------------');

    const list = [10, 20];
    const cb = (element, index, all) => {
        return [[element + 5]];
    };

    log(list.map(cb));
    // :: [[15] , [25]];
    log(list.flatMap(cb));
    // :: [15, 25 ]
    debugger;

    // 1. 콜백 함수에서 배열로 반환한다

    // 2. map()은 반환된 배열을
    //    새로운 배열에 설정하여 반환하므로
    //    2차원이 배열이 되지만

    // 3. flatMap()은 반환된 값을
    //    1차원 줄여서 반환한다

    // 4. 이것이 map()과 flatMap()의 차이이다.

    /**
     *  --> flatMap은 콜백함수가 다끝난후 반환된 배열에 할당된 값을 1차원줄여서 반환한다.
     *
     *  == flatMap은 1차원 줄여서 반환한다. ==
     */
}