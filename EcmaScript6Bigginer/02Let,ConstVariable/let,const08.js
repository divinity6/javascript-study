/**
 * 프로그램 설명문서 주석
 * 2021.07 29 수업
 *
 *           ===== const 변수 =====
 *
 *      - 구문: name1 [= value1][, name2 [= value2]]
 *
 *      - 값을 바꿀 수 없는 변수 선언
 *      --> let 변수는 값을 바꿀 수 있는데 const 변수는 한번 변수가
 *          선언되면, 그다음에는 값을 바꿀 수 없다( 이것이 가장 큰 특징 )
 *
 *      - name1에 변수 이름 작성, 식별자로 사용
 *
 *      - value1, value2에 초깃값 작성
 *      --> 반드시 값을 작성, 변수 선언만 불가
 *      --> 표현식 작성 가능, 평가 결과 사용
 *
 *      - JS에서 상수는 대문자 사용이 관례
 *
 *      - 우선 let이 아닌 const 사용 가능을 검토
 *
 */
console.log("=====================================");
"use strict";
// console.log 사용
const log = function (value) {
    console.log('--- ' + value + ' ---');
};

log('const 변수');
const sports = "축구";
try {
    sports = "농구";
} catch (e) {
    console.log("const 할당 불가");
    // :: const 할당 불가
}

// 1. const sports = "축구";
//    sports를 const로 선언하고 값 할당

// 2. try {sports = "농구" :
//    try 블록도 별도의 스코프이지만
//    const, let을 작성하지 않았으므로

// 3. sports 변수에 값을 할당하게 된다
//    sports가 const 변수이므로 에러가 발생한다.

/**
 *      - const 라는것이 값을 바꿀 수 없다는 개념인데 ,그것이 상수라는 개념이다.
 *      --> 그런데 자바스크립트에서 상수는 그동안 대문자 사용이 관례였다.
 */

log('상수는 대문자 사용');
const bouns = 100;
const POINT = 200;

// 1. const가 상수이지만
//    값 형태에 따라 바꿀 수도 있다.
//    다음 페이지에서 다룬다

// 2. const POINT = 200;
//    대문자 사용이 코딩 관례이므로 괜찮다

/**
 *      - POINT 처럼 대문자를 사용했다라는것,
 *        즉, 상수라는 것은 POINT의 값을 바꾸지 않겠다라는 시멘틱이 담겨져있는 것이다
 *
 *      - 그런데 const가 나와있기때문에, 이제 대문자를 사용하지 않아도 되지않는가?
 *        이런식의 생각을 할 수도있다.
 *
 *      --> 그런데 const 변수라고 해서 항상 값을 바꿀수 없는 것은 아니다.
 *      --> [[이것이 object 이거나 array일 경우에는 값을 바꿀 수 있다!!.]]
 *
 *      - 따라서, 완전하게 const 변수라고 해서 값을 바꿀 수 없는 것은 아니다!!
 *
 *      --> 그런 개념에서 본다면 POINT는 상수라는 개념의 시멘틱이고,
 *          그동안의 대문자 사용이 코딩 관례였기 때문에 대문자 사용도 괜찮지 않느냐?
 *          라고 생각.
 *
 *      --> 대문자 자체가 그동안의 코딩관례로 시멘틱이 담겨져 있는 것이다.(상수라는 시멘틱)
 *
 *      - 그런데 let, const, var 이 세개를 놓고 어떤것을 사용할지 고민이 된다면,
 *      --> 우선 var가 아닌 let을 사용하고, let이 아닌 const 사용을 먼저 검토해야한다.
 *      --> 우선순위 : const -> let -> var
 */

/**
 *
 *           ===== const 변수 =====
 *
 *      - const 변수 전체를 바꿀 수는 없지만
 *      - Object의 프로퍼티 값을 바꿀 수 있음
 *      - 배열의 엘리먼트 값도 바꿀 수 있음
 *
 */

log('Object의 프로퍼티 값');
const book = {title: "책"};
try {
    book = {title: "음악 책"};
} catch (e) {
    console.log("const 전체 할당 불가");
    // :: const 전체 할당 불가
}
book.title = "미술 책";
console.log(book.title);
// :: 미술 책

// 1. book = { title : "음악 책" };
//    book에 값을 할당하면 에러 발생
//    book 전체를 바꿀 수 없다

// 2. book.title = "미술 책";
//    프로퍼티 값은 변경할 수 있다.

// 3. const 변수의 변경 불가는
//    book에 값을 할당하는 것을 뜻한다.

/**
 *      - book 에다가 object를 할당하고
 *      --> 다시 book 전체에다가 object를 할당하면 에러가 난다.
 *      --> 왜냐하면 전체를 바꿀 수는 없다.
 *
 *      - 한편 book.title 처럼 property이름으로 해서
 *        property 값을 바꾸면, 이것은 바뀐다.
 *
 *      --> const 변수라고 해서 무조건적으로 바꿀 수 없는 것은 아니고,
 *          변수가 objcet 형태일때는 프로퍼티 값을 바꿀 수 있고,
 *
 *      --> book = { title : "음악 책" }과 같이 전체를 몽땅 할당시키는 것은 안된다.
 */

log('배열의 엘리먼트 값');
const book2 = ["책"];
try {
    book2 = ["음악 책"];
} catch (e) {
    console.log("const 전체 할당 불가");
    // :: const 전체 할당 불가
}
book2[0] = "미술책";
console.log(book2[0]);
// :: 미술책

// 1. book = ["음악 책"];
//    book에 값을 할당하면 에러 발생

// 2. book[0] = "미술 책";
//    엘리먼트 값은 변경할 수 있다.

// 즉, 배열의 엘리먼트값을 바꿀수는 있는데 배열 전체는 안된다!!





