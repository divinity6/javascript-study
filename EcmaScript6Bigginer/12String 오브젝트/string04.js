/**
 * 프로그램 설명문서 주석
 * 2021.09 10 수업
 *
 *           ===== padStart() =====
 *      -----------------------------------------------------------
 *      - 구분                  - 데이터(값)
 *
 *      - 형태                  - String.prototype.padStart()
 *      - 파라미터               - 늘릴 길이 값
 *                             - 설정할 값(opt)
 *      - 반환                  - 길이를 늘리고 문자열을 채운 결과
 *      -----------------------------------------------------------
 *
 *      - 첫 번째 파라미터 값만큼 길이를 늘리고
 *      --> 늘어난 끝에 대상 문자열을 설정한 후
 *      --> 앞의 남은 공간에 두 번째 파라미터를 채움
 *
 *      - 두 번째 파라미터에 채울 문자열 작성
 *
 *      ----> 원래 데이터보다 길이가 작으면 원래 데이터 그대로를 반환한다.
 *
 */
console.log("=====================================");
"use strict"
// console.log 사용
const {log} = window.console;
{
    "use strict"
    log('------------ padStart() ---------------');

    // 10자리중 ABC의 앞에 7자리가 남게되고 123을 반복하여 채우게된다.
    log("ABC".padStart(10, "123"));
    // :: 1231231ABC

    log("ABC".padStart(6, "123456"));
    // :: 123ABC

    log("ABCDE".padStart(3, "123"));
    // :: ABCDE

    log("ABC".padStart(6).length);
    // :: 6

    log("ABC".padStart(6));
    // :: '   ABC'
    debugger;

    // 1. "ABC".padStart(10,"123")
    //     10자리로 늘리고 8/9/10번째에 "ABC"를 설정
    //     남은 7자리에 "123"을 왼쪽부터 반복하여 채운다.

    // 2. "ABC".padStart(6,"123456")
    //    6자리 끝에 ABC를 설정하면 3자리가 남는다
    //    123456을 왼쪽부터 채우므로 123이 채워진다

    // 3. "ABCDE".padStart(3,"123")
    //    전체 길이가 대상 문자열보다 작으면
    //    길이를 줄이지 않고 대상 문자열을 반환한다.

    // 4. "ABC".padStart(6).length
    //    두 번째 파라미터를 작성하지 않으면
    //    남은 앞에 빈문자열을 채운다.
}

/**
 *           ===== padEnd() =====
 *      -----------------------------------------------------------
 *      - 구분                  - 데이터(값)
 *
 *      - 형태                  - String.prototype.padEnd()
 *      - 파라미터               - 늘릴 길이 값
 *                             - 설정할 값(opt)
 *      - 반환                  - 길이를 늘리고 문자열을 채운 결과
 *      -----------------------------------------------------------
 *
 *      - 첫 번째 파라미터 값만큼 길이를 늘리고
 *      --> 늘어난 앞에 대상 문자열을 설정한 후
 *      --> 뒤의 남은 공간에 두 번째 파라미터를 채움
 *
 *      - 두 번째 파라미터에 채울 문자열 작성
 *
 */

{
    "use strict"
    log('------------ padEnd() ---------------');

    log("ABC".padEnd(10, "123"));
    // :: ABC1231231

    log("ABC".padEnd(6, "123456"));
    // :: ABC123

    log("ABCDE".padEnd(3, "123"));
    // :: ABCDE

    log("ABC".padEnd(6).length);
    // :: 6

    debugger;

    // 1. "ABC".padEnd(10,"123")
    //    10자리로 늘리고 1/2/3번째에 "ABC"를 설정
    //    남은 7자리에 "123"을
    //    왼쪽부터 반복하여 채운다

    // 2. "ABC".padEnd(6,"123456")
    //     6자리 앞에 ABC를 설정하면 3자리가 남는다.
    //     123456을 왼쪽부터 채우므로 123이 채워진다

    // 3. "ABCDE".padEnd(3,"123")
    //    전체 길이가 대상 문자열보다 작으면
    //    길이를 줄이지 않고 대상 문자열을 반환한다

    // 4. "ABC".padEnd(6).length
    //    두 번째 파라미터를 작성하지 않으면
    //    남은 뒤에 빈문자열을 채운다.
}

/**
 *           ===== trimStart() =====
 *      -----------------------------------------------------------
 *      - 구분                  - 데이터(값)
 *
 *      - 형태                  - String.prototype.trimStart(), ES2019에서 출현
 *      - 파라미터               - 없음
 *      - 반환                  - 삭제한 결과
 *      -----------------------------------------------------------
 *
 *      - 문자열 앞의 공백 삭제
 */

{
    "use strict"
    log('------------ trimStart() ---------------');

    // 123앞에 공백이 2개있기 때문에 length가5
    const value = "  123"
    log(value.length);
    // :: 5

    log(value.trimStart().length);
    // :: 3

    // 아 앞부분에 공백이 있을경우에!!
    const split = "a, b, c".split(",");
    for (let value of split) {
        log(`${value}, ${value.length}`);
        // :: a, 1
        // ::  b, 2
        // ::  c, 2
        log(value.trimStart().length);
        // :: 1
        // :: 1
        // :: 1
        debugger;
    }
    ;

    debugger;

    /**
     *  - a, b, c 이런경우에 많이 쓰이게 되는데 이것들을 , 기준으로 split함
     *  --> for-of문으로 읽으면 처음에 a가 들어온다.
     *  --> 다음에 읽으면 공백b가 들어와 length가 2가나오는데
     *      trimStart()를 하게되면 공백이제거되어 length가 1이 된다.
     */
}
/**
 *      - trimStart와 기능이 똑같다
 *
 *           ===== trimEnd() =====
 *      -----------------------------------------------------------
 *      - 구분                  - 데이터(값)
 *
 *      - 형태                  - String.prototype.trimEnd(), ES2019
 *      - 파라미터               - 없음
 *      - 반환                  - 삭제한 결과
 *      -----------------------------------------------------------
 *
 *      - 문자열 끝의 공백 삭제
 */

{
    "use strict"
    log('------------ trimEnd() ---------------');
    const value = "123  ";
    log(value.length);
    // :: 5

    log(value.trimEnd().length);
    // :: 3

    debugger;
}










