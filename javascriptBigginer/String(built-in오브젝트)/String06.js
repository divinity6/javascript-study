/**
  * 프로그램 설명문서 주석
  * 2021.01.13 수업
  * 
  *     ====== 인덱스로 문자열 처리 ========
  * 
  *      - charAt()
  * 
  *      -- At은 위치의 시멘틱을 갖는다
  * 
  *      - 구분               - 데이터(값)
  *      - data               - 반환 대상
  *      - 파라미터           - 반환 기준 인덱스(Index)
  *      - 반환               - 인덱스 번째 문자
  * 
  *   ------------------------------------------------
  *      - 인덱스의 문자를 반환
  * 
  *      - 문자열 길이보다 인덱스가 크면
  *      -- 빈 문자열 반환
  * 
  *      - 일반적으로 존재하지 않으면
  *      -- undefined를 반환
 */

console.log("=====================================");
window.onload = function() {
   "use strict"
   debugger;
   
   var value = "sports";

   console.log(value.charAt(1));
   // 1. JS에서 인덱스는 0부터 시작
   // 2. 0번 인덱스는 s,1번 인덱스는 p
   console.log(value[1]);

   /*
      ** 강좌에서 인덱스 표기 기준 **
      - 0번 인덱스는 첫 번째 인덱스고
      - 1번 인덱스는 두 번째 인덱스다
   */

   // 3. value.charAt(1)을
   // ES5에서 [1] 형태로 사용할 수 있다,

   debugger;
   
   console.log('빈문자열반환');
   console.log(value.charAt(12));
   // 파라미터의 인덱스가 전체 문자열 길이보다 크면 빈 문자열 반환
   
   
   debugger;
   
   console.log(value[12]);               //이형태가 시멘틱적으로 더좋다
   // 1. value[12]에서 12번째 인덱스가 없으며
   // undefined 반환
   
   // 2. charAt(12)에서
   // 빈 문자열을 반환하는 것과는 차이가 있음
   
   // 3. 개념적으로 undefined 반환이 적절하다
   // - undefined는 시맨틱 적으로 인덱스 번째가
   // - 없다는 뉘앙스가 강하다
   
   
   debugger;
   
   
   /*
   - indexOf()
    --> 중요 개념 파라미터의 인덱스 번째의 값을반환하는 것
    --> 인덱스번째의 값이 존재하면 0이상값을 존재하지않으면 -1을 반환
   
   -- Of는 ~~의 라는 시맨틱을 갖는다
   
   - 구분               - 데이터(값)
   
   - data               - 검색 대상
   
   - 파라미터            - 검색할 문자열
                        - 검색 시작 위치, 디폴트 0
   
   - 반환                - 인덱스
   
   ---------------------------------------------------
   - data 위치의 문자열에서 파라미터의 문자와 같은 첫번째 인덱스를 반환
   
   - 검색 기준
   -- 왼쪽에서 오른쪽으로 검색
   
   -- 두 번째 파라미터를 작성하면 작성한 인덱스(두번째 파라미터)부터 검색
   
   -- 같은 문자가 없으면 -1 반환
   */
  var value2 = "123123";
  console.log(value2.indexOf(2));
  // 1. "123123"에서 2가 두 개이지만
  //    처음 인덱스를 반환하므로 1을 반환
  // ---------> 1번 인덱스에 2가있기때문에 1을 반환

  // 2. 값을 구하게 되면 더이상 값을 구하지 않음
  // 3. indexOf(23)에서 23이 존재하며 2가 검색된 인덱스를 반환한다.
  console.log(value2.indexOf(23));
  
  debugger;
  
  console.log(value2.indexOf(2,3));
  // -----------> 2를 검색하는데 3번인덱스부터 하라는뜻 
  // 1. indexOf(2,3)에서 3은 3번 인덱스부터 검색 하므로 1이 아닌 4를 반환
  
  
  debugger;
  
  console.log(value2.indexOf(15));
  //같은 문자가 없으면 -1을 반환
  
  /*
  - 이런것은 보통 어떤 문자가 몇번째에 어디에있는가를 찾는가가 목적
  - 다음에 찾는문자가 문자열에 있는지 없는지 확인
  
  예) 찾는문자가 검색 대상에 있느냐 없느냐
  - 있다면 0부터 시작, 없으면 -1
  - 그래서 보통 프로그램에서 이렇게짠다
  - if 0보다 작으면 이것은 존재하지않고 그렇지 않으면 존재한다
  - ES6부터 include 지원. 이것은 존재하면 true 존재하지않으면 false 반환(존재여부)
  
  */
 
   debugger;
   console.log(value2.indexOf(2,-1));
   // 1. 두 번째 파라미터 값이 0보다 작으면 처음부터 검색
   console.log(value2.indexOf(2,9));
   // 2. 두 번째 파라미터 값이 length보다 크면 -1 반환
   console.log(value2.indexOf(2,"A"));
   // 3. 두 번째 파라미터 값이 NaN이면 처음부터 검색
 
   debugger;
   
   /*
         - lastIndexOf()

         ---> 마지막이라는 시맨틱
   
   
         - 구분                    - 데이터(값)
         
         - data                    - 검색 대상
         
         - 파라미터                 - 검색할 문자열
         - 검색 시작 위치, 디폴트 0
         
         - 반환                     - 인덱스
         
         
         -------------------------------------------------
         -- data 위치의 문자열에서 파라미터의 문자와 같은 인덱스를 반환
         -- 단, 뒤에서 앞으로 검색
         
         -- 검색 기준
         ---> 두번째 파라미터를 작성하면 작성한 인덱스(두번째 파라미터)부터 검색
         ---> 같은 문자가 없으면 -1 반환
   */

   console.log(value2.lastIndexOf(2));

   var value3 = "1231231";
   console.log(value2.lastIndexOf(1,4));
   // 앞에서부터 4번째 인덱스를 뒤에서 앞으로 검색
   console.log(value2.lastIndexOf(2,-1));

   // 1. 두 번째 파라미터가 0 보다 작으면 -1 반환.


   debugger;
        
};



