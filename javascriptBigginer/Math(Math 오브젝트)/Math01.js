/**
  * 프로그램 설명문서 주석
  * 2021.03 08 수업
  * 
  *           
  *           ===== Math 오브젝트 개요 =====
  * 
  *       - 수학 계산용 오브젝트
  *       ----> 상수, 절댓값, 사인 ,탄젠트 등
  * 
  *       - new 연산자로 인스턴스 생성 불가
  *       ----> Math, JSON, 글로벌 오브젝트
  * 
  *       - 메소드가 아니라 함수
  *       ----> Math.abs(값) 형태
  * 
  *       -------------------------------------------------------
  * 
  *       - new 연산자로 인스턴스를 생성할 수 없는 빌트인 오브젝트에는
  *         Math, JSON, 글로벌 오브젝트가 있다.
  * 
  *       - 인스턴스를 생성할 수 없다는 이야기는 프로토타입이 없다는 이야기다.
  * 
  *       - 그러나 글로벌 오브젝트는 =="프로토타입"== 이 있는 것도 있다.
  *       ----> 왜냐하면 스펙에 prototype 사용 여부를 브라우저 개발사에게
  *             일임했기 때문에 그렇다.
  *             
  *             그렇다고 글로벌 오브젝트에 [[메소드가 있는 것은 아니다.]]
  * 
  *       ----> 단지, 구조를 맞추기 위한것이지, 거기에 메소드를 연결해서
  *             쓰겠다는 것은 아니다. 따라서 글로벌 오브젝트에 있는것은
  *             전부 다 함수이다.
  * 
  *       ----> 때문에 Math 오브젝트에 있는 것도 전부 함수다.
  * 
  * 
  *       ---------------------------------------------------------------------
  * 
  *                 ===== Math 상수 =====
  * 
  *       - 이름     - 값                       - 개요
  *       
  *       == Math 상수
  * 
  *       - E        - 2.7182818284590452354    - 자연로그 상수(e)
  *       - LN12     - 2.302585092994046        - 자연로그 10
  *       - LN2      - 0.6931471805599453       - 자연로그 2
  *       - LONG2E   - 1.4426950408889634       - 밑이 2인 e(자연로그 밑) 로그
  *       - LOG10E   - 0.4342944819032518       - e의 상용 로그(10을 밑으로 하는 로그) 값
  *       - PI       - 3.1415926535897935       - π(원주율)
  *       - SQRT1_2  - 0.7071067811865476       - 0.5의 제곱근 값
  *       - SQRT2    - 1.4142135623730951       - 2의 제곱근
  * 
  *      -----------------------------------------------------------------------------
  * 
  *      이런거보면 김남...
  *      머신러닝을 하다보면 이런것과 친해진다...
  *      ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
  * 
  * 
  *     -----------------------------------------------------------------------------
  * 
  *               ===== Math 함수 =====
  *     
  *     - 이름       - 개요                 - 이름      - 개요
  * 
  *     - abs()*     - 절댓값 반환          - acos()    - 아크 코사인(arc cosine)
  * 
  *     - floor()*   - 소수 이하 버림,      - sin()     - 사인(sine)
  *                    정숫값 반환
  *     - ceil()*    - 소수이하 올림,       - asin()    - 아크 사인(arc sine)
  *                    정숫값 반환
  *     
  *     - round()*   - 소수 이하 반올림,    - tan()     - 탄젠트(tangent)
  *                    정숫값 반환
  *     - max()*     - 최댓값              - atan()     - 아크 탄젠트(arc tangent)
  * 
  *     - min()*     - 최솟값              - atan2()    - x,y 좌표의 아크 탄젠트
  *                                                      (arc tangent)
  *     - random()*  - 0에서 1미만 난수     - sqrt()     - 제곱근
  *     - pow()*     - x의 y자승 값        - exp()       - 자연로그 상수(e)의 제곱근
  *     - cos()      - 코사인(cosine)      - log()       - 자연로그 값
  * 
  *     ---------------------------------------------------------------------------
  * 
  *      - 강좌에서는 일반적으로 사용하는 *표시의 함수만 다룬다
  * 
  *      - ES6에서 수학 함수가 많이 늘어났다
  * 
  *      - 이로 인해 자바스크립트 사용 범위가 더 넓어 졌다.
  *      
  *      - 특히, 머신러닝/딥러닝에서 Math 함수는 유용하다.
  * 
  *     ----------------------------------------------------------------------------
  *     
  *     ----> *표시가 되어있지 않는 함수들은 일반적인 애플리케이션 개발에서 잘 쓰이지
  *            않는다. 필요하면 MDN에서 검색해서 사용하면 된다.
  * 
  *     ----> 그러나 *표시가 된 함수들은 일반 애플리케이션 개발에서도 많이 사용된다.
  *           여기에 사용되는 개념만 이해하고 있으면 문제가 없다.
  * 
  *     ----> ES6에서 함수가 많이늘어나서 수학의 많은 부분을 
  *           함수로 값을 구할 수 있게 되었다.
  * 
  * 
  */
 console.log("=====================================");
 
 window.onload = function() {
   "use strict"
   // console.log 사용
   var log = function( value , key ){
     if ( key === "note") {
       console.log('--- ' + value +' ---');
      } else { console.log(value); }
  };

  /*
            ===== abs() =====
  
      - 구분                - 데이터(값)

      - 파라미터            - 값
      - 반환                - 변환한 절댓값

      ----------------------------------------

      - 음수를 양수로 변환한 절댓값 반환
  */

  log('절댓값 반환' , 'note');

  console.log(Math.abs(-123));
  // :: 123
  console.log(Math.abs(-Infinity));
  // :: Infinity

  /*
            ===== floor() =====
  
      - 구분                - 데이터(값)

      - 파라미터             - 값
      - 반환                - 변환한 값

      -----------------------------------------------

      - 소수 이하 버림, 정숫값만 반환
      - 소수 이하 값이 있으면서 음수이면 -1을 더해 반환
  */

  log('소수 이하 버림','note');

  console.log(Math.floor(5.3));
  // :: 5
  console.log(Math.floor(-1.7));
  // :: -2
  // .7을 버리면서 -1을 더한다.
  console.log(Math.floor(-1.0));
  // :: -1
  // .0은 있으나 마나한 값이라 그냥 -1을 반환한다.

  /*
            ===== ceil() =====
  
      - 구분              - 데이터(값)

      - 파라미터          - 값
      - 반환              - 변환한 값

      ----------------------------------------

      - 소수 이하 올림, 정숫값만 반환
  
  */

  log('소수 이하 올림','note');

  console.log(Math.ceil(5.1));
  // :: 6
  console.log(Math.ceil(-1.7));
  // :: -1
  console.log(Math.ceil(-0.3));
  // :: -0

  /*
            ===== round() ======
  
      - 구분                - 데이터(값)

      - 파라미터            - 값
      - 반환                - 변환한 값

      ------------------------------------------

      - 소수 이하 반올림, 정숫값 반환
      - 양수이면 반올림, 음수이면 반내림
  */

  log('소수 이하 반올림' , 'note');

  console.log(Math.round(5.1));
  // :: 5
  console.log(Math.round(5.6));
  // :: 6
  console.log(Math.round(-1.6));
  // :: -2
  console.log(Math.round(-1.3));
  // :: -1

  /*
            ===== max() =====
  
      - 구분            - 데이터(값)

      - 파라미터         - 콤마로 구분하여 값 작성(여러개)
      - 반환            - 변환한 값

      ---------------------------------------------

      - 파라미터 값 중에서 가장 큰 값을 반환
      - 파라미터 값을 전부 숫자로 변환하여 비교
      ----> NaN가 하나라도 있으면 NaN 반환

      -----------------------------------------------
      
      - 파라미터 값을 전부 숫자로 변환하여 비교한다.
        따라서 하나라도 NaN가 있으면 NaN를 한다.

      ----> 왜냐하면
            예를 들어 10개중에 하나를 비교할 수 없다고 한다면
            신뢰성이 없어지기 때문에 "안된다"고 하고 NaN을 반환한다.
  */

  log('최댓값 반환' , 'note');

  console.log(Math.max( 5 , 3 , 9 ));
  // :: 9
  // 수학 값으로 비교한다 ( 유니코드로 비교하지 않는다. )
  console.log(Math.max( 5 , 3 , "AB" ));
  // :: NaN
  // "AB"가 NaN이므로 비교할 수 없음!이 되는 것.



  /*
            ===== min() =====
  
      - 구분            - 데이터(값)

      - 파라미터         - 콤마로 구분하여 값 작성(여러개)
      - 반환            - 변환한 값

      ---------------------------------------------

      - 파라미터 값 중에서 가장 작은 값을 반환
      - 파라미터 값을 전부 숫자로 변환하여 비교
      ----> NaN가 하나라도 있으면 NaN 반환

      -----------------------------------------------
      
      - max와 같다
  */

  log('최솟값 반환', 'note');
  console.log(Math.min( 5 , 3 , 9 ));
  // :: 3
  console.log(Math.min( 5 , 3 , "AB" ));
  // :: NaN


  /*
            ===== pow() =====
  
      - 구분            - 데이터(값)

      - 파라미터         - x
                        - y
      - 반환             - 변환한 값

      -----------------------------------------------

      - 파라미터 x값의 y승 값을 반환
      - y가 0일 때 x가 NaN라도 1을 반환
      - y가 NaN이면 NaN 반환
      - 이처럼 경우의 수가 많으므로 사용하기 전에 테스트가 필요함.
  */

  log('자승 값 반환' , 'note');

  console.log(Math.pow(10 , 2));
  // :: 100
  console.log(Math.pow(10 , 0));
  // :: 1
  // 10의 0승은 1이다.
  console.log(Math.pow("A" , 1));
  // :: NaN
  // 그러나 A는 숫자가 아니기 때문에 NaN이다.
  console.log(Math.pow(1 , "A"));
  // :: NaN
  // 1의 A승도 있을 수 없으니 NaN.
  console.log(Math.pow(1));
  // :: NaN
  // 1. 두 번째 파라미터를 작성하지 않으면 NaN 반환.
  // 승을 작성하지 않아도 NaN


  debugger;

  /*
            ===== random() =====
  
      - 구분              - 데이터(값)

      - 파라미터           - 사용하지 않음
      - 반환              - 변환한 값

      -------------------------------------

      - 0에서 1미만 사이의 난수 반환

      ------------------------------------

      이 random()은 가끔가다도 많이 사용한다.
  */

  log('난수 반환' , 'note');

  console.log(Math.random());
  // :: 0.2668127477221278
  // 어떤 값이든 발생한다.(0과 1사이의...)
  console.log(Math.random());
  // :: 0.36639439221089076

  // 1. random() 함수를 실행할 때마다 다른 값이 반환된다.

};
