/**
  * 프로그램 설명문서 주석
  * 2021.01.18 수업
  * 
  * ====== 자바스크립트의 오브젝트 ========
  * 
  * 
  *     - 오브젝트 구분
  *     
  *     --> 빌트인 오브젝트 Built-in Object
  *     
  *     --> 네이티브 오브젝트 Native Object
  * 
  *     --> 호스트 오브젝트 Host Object 
  * 
  *     로 구분 할 수 있다.
  * 
  * 
  *     ---------------------------------------
  * 
  *     - 네이티브 오브젝트
  * 
  *     --> 빌트인 오브젝트
  * 
  *     ---> 사전에 만들어 놓은 오브젝트
  * 
  *     ---> 빌트인 Number 오브젝트,
  *     ---> 빌트인 String 오브젝트
  * 
  * 
  *     --> 네이티브 오브젝트
  * 
  *     ---> JS(자바스크립트) 스펙에서 정의한 오브젝트
  * 
  *     ---> 빌트인 오브젝트 포함, 여기에
  *     
  *     ---> JS 코드를 실행 할 때 만드는 오브젝트
  * 
  *     ---> 예) Argument 오브젝트
  *     ------> 함수가 호출되면 함수 안에서 만들고 함수를 빠져나오면 자바스크립트 엔진이 자동적으로 지운다
  *             (빌트인 성격이지만 약간 사용성에서 차이가 있다.)
  * 
  * 
  *     ---------------------------------------------
  * 
  *     따라서 자바스크립트 오브젝트는 빌트인 오브젝트가 네이티브 오브젝트에
  * 
  *     속하므로 네이티브 오브젝트와 호스트 오브젝트로 구분할 수 있다. (ES5 기준)
  * 
  * 
  *     ---------------------------------------------
  * 
  *     - 호스트 오브젝트
  * 
  *     -- 빌트인, 네이티브 오브젝트를 제외한 오브젝트
  * 
  *     -----> 즉, 네이티브 오브젝트가아니면 전부 호스트 오브젝트인 것이다.
  * 
  *     ---> 예) wndow,DOM(DocumentObjectModel) 오브젝트
  * 
  *     -- JS(자바스크립트)는 호스트 환경에서
  *     ---> 브라우저의 모든 요소 기술(예: 호스트 오브젝트)을
  *     ---> 연결하고 융합하며 이를 제어
  *     
 */
console.log("=====================================");
window.onload = function() {
   "use strict"
   debugger;

   var node = document.querySelector("div");
   // 1. querySelector()는 DOM 함수
   // --> 이함수는 자바스크립트에서 제공하는 함수가아니라(즉, 자바스크립트 스펙에 
   // 작성된 함수가아니라 DOM스펙에 작성된 함수이다)
   // 2. DOM에서 제공하는 오브젝트를 호스트(Host) 오브젝트라고 부른다
   // 3. 마치 JS 함수 처럼 DOM 함수를 사용

   /*
        1)  그런데 마치 JS(자바스크립트) 함수처럼보인다.
            또한 어떠한 처리를 하지도 않고 바로 사용할 수도 있다.

            document.querySelector() 
            (오브젝트).(함수)

        2)  위 구조에서 앞의 오브젝트를 호스트 오브젝트라고 부른다.
            즉, 자바스크립트는 이 호스트 오브젝트를 마치 자바스크립트 오브젝트
            처럼 사용할 수 있다.

        3)  또한 호스트 오브젝트에서는 자바스크립트에서 사용 할 수있는 형태로 만들어서 제공한다
   
        - 이러한 환경을 호스트 환경이라고 한다.


        예) DOM 오브젝트에서 event를 발생하기위해서는 event 발생을 설정해야한다.
            그것도 DOM에서 제공한다. 하지만 그것을 JS파일에서 작성한다.(마치 JS 처럼)

            그리고 클릭을 하게 되면 클릭한것을 인식하는 것도 DOM에서 제공한다. 그러나
            자바스크립트 처럼 사용할 수 있는 것.

            클릭을 했으니 무언가 처리를 해야하는데 이때 자바스크립트로 처리를 하게되는것.

            이에 따라서 또 연결되는 처리가 있으면 또 연결하고 하는것

            이런 어떤 호스트 환경에서 자바스크립트가 실행 되는것.
   */
   console.log(node.nodeName);

   debugger;

   /*
   
            === 오브젝트와 인스턴스 ===

            -- 강좌에서는
            ---> 오브젝트와 인스턴스를 구분

            -- 강좌에서 오브젝트는
            ---> new 연산자를 사용하지 않고
            ---> 빌트인 오브젝트로 만든 오브젝트를 지칭

            --  var abc = new Object();
                var obj = {};
            ---> new 연산자를 사용한 abc는 인스턴스
            ---> 사용하지 않은 obj는 오브젝트

            >> 위의 두가지 경우 모두 인스턴스를 만든다
            >> new Object 나, {}이나 하지만 new 연산자를 사용했기 때문에
            >> 강좌에선 abc 인스턴스라고 부르고
            >> obj는 new 연산자를 사용하지 않았기 때문에 obj 오브젝트라고부르겠다.

            -- 오브젝트를 번역하면 객체이지만
                뉘앙스 차이 있으며, 단계적으로 설명함
   
   */
}



