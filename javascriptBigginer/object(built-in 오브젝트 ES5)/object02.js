/**
  * 프로그램 설명문서 주석
  * 2021.02 28 수업
  * 
  *           
  *           ===== definedProperty() =====
  * 
  *           - 구분                  - 데이터(값)
  * 
  *           - object                - Object 오브젝트
  *           - 파라미터              - 대상 오브젝트
  *                                   - 프로퍼티 이름
  *                                   - 속성
  *           - 반환                  - 대상 오브젝트
  * 
  *           ------------------------------------------
  * 
  *           - 대상 오브젝트에 프로퍼티 추가 또는 프로퍼티 속성 변경
  * 
  *           - 프로퍼티마다 상태를 갖고 있음
  *           ----> 상태란? 변경/삭제/열거 가능 여부
  *           ----> 상태가 가능일 때만 처리할 수 있음
  *           ----> 프로퍼티를 추가할 때 상태 결정
  * 
  *           ----------------------------------------------------
  * 
  *           프로퍼티의 상태가 변경가능 상태일 때만 변경할 수 있다.
  * 
  * 
  *
  */
 console.log("=====================================");
 
 window.onload = function() {
   "use strict"
   // console.log 사용
   var log = function( value , key ){
     if ( key === "note") {
       console.log('--- ' + value +' ---');
      } else { console.log(value); }
  };

  log('프로퍼티 추가','note');

  var obj = {};
  var obj2 = { book: "js책" };
  
  Object.defineProperty( obj , "book" , {
    value: "JS북",
    enumerable: true,
  });
  // 1. 첫 번째 파라미터에 프로퍼티를 추가할 오브젝트(obj) 작성
  // 2. 두 번째 파라미터에 프로퍼티 이름(book) 작성
  // 3. 세 번째 파라미터 { value : "JS북"}에서
  // -  value는 프로퍼티 값을 나타내는 속성
  // -  "JS북"은 value의 속성 값으로
  // -  [실행 결과]처럼 프로퍼티 값이 된다.
  
  console.log(obj);
  console.log(obj2);
  
  /*
    ------------------------------------------------
      
    defineProperty 애는 함수니깐 Object 즉, 대상오브젝트를 앞에 썼다.

    - 첫 번째 파라미터에 대상 오브젝트 작성.
      value: "JS북"은 위의 obj에다가 key: value 의 
      value를 넣는다고 생각하면된다.
      그리고 또 enumerable: true, 이라는 속성을 넣는 것이다.

    - 그리고 두번째 파라미터에 프로퍼티 이름!
      key를 작성한다

    - 그리고 세번째 파라미터!
      여기서 value 속성은 프로퍼티의 값이 된다.
      그래서 value, 하고 값을 작성한다.

      그리고 enumerable이것은 열거가능 여부다. true를 준것

    - 여기서 obj = {}; 은 ES1.0에서 나왔다.
      이것의 defult값은 변경/삭제/열거가 가능이다
      속성이 전부 true다.

    - 그런데 defineProperty는 ES5에서 나왔다. 여기서
      변경/삭제/열거 가능 여부가 defult 값이 false다!!!

    == 따라서 obj = {};로 만든것과 defineProperty로 만든것은 반대이다!
       그래서 obj = {};와 같이 열거를 하려면 반드시 true를 줘야한다

       defult가 false이다!

    - 그렇다면 이것을 어디에서 쓰는가???

    -----------------------------------------------------------------

    - 자바스크립트 소스는 소스가 오픈된다. 예를 들어서 오픈소스를 만들었다.
      아니면 업무용 프로그램을 만들었다

    - 이때 다른사람들에게 오픈을 시킬때는, 그사람들이 메소드를 가지고 보통
      호출해서 쓸 수 있게 한다. 그런데 소스가 오픈되니 일부는 코드를 보고
      여기서 데이터를 만든것 가지고 가서 자기가 프로그램을 가지고 데이터를
      읽어가거나 할 수 있기 때문이다.

    - ES5에서는 이러한 속성들을 가지고 데이터를 보호 할 수있다.
      처음부터 defineProperty같은거를 실행시켜놓으면 그사람들은 열거를
      할수 없는 것이다.

    - 그런 어떤, 데이터를 보호할 수 있는 형태가 되는 것이다. 이것이
      주된 목적이기도 하다.
  */

  debugger;

  /*
    -----------------------------------------------------------------
  
      ===== defineProperties() =====
  
      - 구분                  - 데이터(값)

      - object                - Object 오브젝트
      - 파라미터              - 대상 오브젝트
                              - 프로퍼티 이름과 속성
      - 반환                  - 대상 오브젝트

      ---------------------------------------------------------------

      -- 다수의 프로퍼티를 추가하거나 속성 변경
      ----> 함수 기능은 defineProperty()와 같다
  */

  obj = {};

  Object.defineProperties(obj, {
    soccer: {
      value: "축구",
      enumerable: true,
    },
    basketball: {
      value: "농구",
      enumerable: true,
    },
  });

  for ( var name in obj ) {
    console.log(name + ":" + obj[name]);
  };

  /*
    defineProperties 안에다 ,를 이용해서 복수를 작성 한다.
    soccer 및 basketball가 프로퍼티 이름이 된다

    그리고 enumerable이 true 이기 때문에 for ~ in 문으로 열거할 수 있다.

    만약 enumerable이 false면 for~in 문으로 열거 할 수 없다.
  */


  debugger;
}
