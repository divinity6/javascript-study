/**
  * 프로그램 설명문서 주석
  * 2021.01.30 수업
  * 
  *      ======= Global 프로퍼티 리스트 ========
  * 
  *     - 이름                                  - 개요
  * 
  *     - 값
  * 
  *     - NaN                                   - Not-a-Number
  *     - Infinity                              - 무한대 값
  *     - undefined                             - undefined
  *     
  *     - 함수
  * 
  *     - isNaN()                               - NaN 여부. NaN이면 true, 아니면 false 반환
  *     - isFinite()                            - 유한대 여부, 유한이면 true, 아니면 false
  *     - parseInt()                            - 정수로 변환하여 반환
  *     - parseFloat()                          - 실수로 변환하여 반환
  *     - eval()                                - 문자열을 JS코드로 간주하여 실행    
  *     - encodeURI()                           - URI 인코딩
  *     - encodeURIComponent()                  - URI 확장 인코딩
  *     - decodeURI()                           - encodeURI 함수의 인코딩 값을 디코딩
  *     - decodeURIComponent()                  - encodeURIComponent 함수의 인코딩 값을 디코딩
  * 
  *     ------------------------------------------------------------------------------------
  * 
  *     --> 프로퍼티에는 3개의 값이 있다. NaN, Infinity, undefined
  *     ----> 그리고 함수. 글로벌 오브젝트는 인스턴스를 만들지 못하므로 전부 함수이다
  * 
  *     --> parseInt() 정수로 변환하여 반환한다
  *     ----> 여기서 parse, 이것을 보통 파싱한다고 이야기한다
  * 
  *     ----> *''파싱이란 문자열을 숫자로 바꾸거나, 또 문자열을 자바스크립트 코드로 바꾸거나''*
  *     ----> 이런 어떤 변환을 뜻한다
  * 
  *     ----> 이것을 언제쓰는가. 
  *     ----> 예) 스타일에서 넓이와 마진을 더하려고한다. 그런데 넓이 값이 24px이다
  *     ----> px가 있으니 이것을 더할 수 없다. 그러니 px를 제외시키기 위해서는 정규표현식을
  *     ----> 사용해야 한다. 그런데 그건 좀 그렇다
  *     ----> 이때 parseInt()함수를 호출하면 px를 제외시키고 24만 반환한다
  *     ----> 그러면 넓이가 24이고 마진이 10이라고하면 24 + 10을 할 수 있다.
  *     ----> 그때 이 parseInt()함수를 쓴다.
  * 
  *     --> 이런 케이스이다
  * 
  *     --> eval()은 evaluate의 약자이다
  *     ----> 이것은 일단 쓰지않는것으로 가닥을 잡아라
  *     ----> 문자열안에다 자바스크립트코드를 작성하고 eval()를 실행시키면
  *     ----> 기계어로 바꾸고 실행까지해버린다.
  *     ----> 바꾸는 것 까지하면 괜찮지만 실행까지 해버린다
  *     
  *     ----> 왜냐하면 문자열안에 악의를 가진 해커가 자바스크립트 코드를 악의적으로 만들어놈
  *     ----> 그런데 그것이실행되버리면 문제가 되자늠
  *     ----> 그래서 보안에 대한 문제가 발생할 수있으므로 되도록 사용하지 말것
  * 
  * 
  *     --> encoding은 숫자와 문자를 사람이 좀 보기 어렵게 바꾸는 것
  *     --> 그리고 decoding은 원래 사람이 볼 수 있는 숫자와 문자로 바꾸는 것
  */
console.log("=====================================");

window.onload = function() {
   /*
                ===== Global 프로퍼티 =====

        - Global 프로퍼티 종류
        
        --> NaN : Not-a-Number
        --> Infinity : 무한대
        --> undefined : undefined

        - 상수 개념으로 사용
        --> 외부에서 프로퍼티 값 변경 불가

        - delete 연산자로 삭제 불가

        ----------------------------------------

        -- '외부에서 프로퍼티 값을 변경 할 수 없다, 상수 개념이니깐.'

   */

  "use strict"
  debugger;

  console.log(NaN);
  // 1. Number.MAX_VALUE 처럼
  //    프로퍼티 앞에 오브젝트 이름을 작성해야 하지만
  console.log(Infinity);
  // 2. 글로벌 오브젝트는 실체가 없으므로
  //    오브젝트 이름을 작성하지 않고 프로퍼티 이름만 작성
  console.log(undefined);
  // 3. 오브젝트 이름을 작성하지 않으면
  //    글로벌 프로퍼티로 인식한다.


  /*
      - 상수 개념이라면 일반적으로 대문자를 쓴다.

      - 그것도 아니다. 그렇다고 값도 아니다. 아 undefined는 값이다.

      - 그렇다면 이것은 보다시피 프로퍼티다.


      - 그러면 이것들은 프로퍼티 이름이 되는것이다. 프로퍼티 이름이라면 앞에

      - 오브젝트 이름이 있어야할 것아닌가. 위의 Number.MAX_VALUE의 Number. 처럼...

      - 그런데 글로벌 오브젝트는 오브젝트라는 실체가 없기때문에 Number 위치에다가 
      
      - Global이라고 쓸 수가 없는 것.


      - 그래서 프로퍼티 이름만 작성한다.

      - 그러면 자바스크립트 엔진이 오브젝트가 없으면 글로벌 오브젝트의 프로퍼티로 간주해서

      - 값을 구한다.


      - 그런데 이것들은 프로퍼티이다. 프로퍼티는 어쨌든 key:value 이니깐 어딘가에 저장이
      
      - 되어야 할 것 아닌가. 어딘가에 저장을 해야 자바스크립트 엔진이 찾아다가 값을 반환

      - 시켜줄 것아닌가.


      - 그런데 글로벌 오브젝트는 없는것이다

      - 처음에 설계할 때 글로벌 오브젝트에 있는 프로퍼티와 함수는 window 오브젝트에 저장하는

      - 것으로 되어있다. 그래서 예를든다면 window.NaN를 해도 값이 나온다


      - 이것은 뒤에서 다시 설명할 것이기 때문에 현시점에서는 글로벌 오브젝트는 실체가 없는데

      - '거기에 있는 프로퍼티와 함수들은 window 오브젝트에 저장된다' 라는 것만 기억해도 된다.
  */

  debugger;
  
  console.log(window.NaN);

  debugger;

}



