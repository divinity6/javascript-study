/**
  * 프로그램 설명문서 주석
  * 2021.01.31 수업
  * 
  *     ======= encodeURI() ========
  * 
  *     - 구분                  - 데이터(값)
  * 
  *     - 파라미터              - URI
  *     - 반환                  - 인코딩 결과
  * 
  *     -------------------------------------
  * 
  *     -- URI를 인코딩(Encoding)하여 반환
  *     ----> Uniform Resource Identifier
  *     ----> 인코딩 제외 문자를 제외하고 "%16진수%16진수" 형태로 변환
  * 
  *     -- 인코딩 제외 문자
  *     ----> 영문자, 숫자
  *     ----> #; / ? : @ & = + $, ~ _ . ! ~ * () 따옴표
  * 
  *     -------------------------------------------------------------
  * 
  *     **URI란 주소창 끝에 첨부되는 값을 뜻한다.
  * 
  */
console.log("=====================================");

window.onload = function() {
  "use strict"
  console.log(window);

  var uri = "data?a=번&b=호";
  console.log(encodeURI(uri));
  /*
      - 번은 %EB%B2%88 이처럼 인코딩 된다

      --> 이형태를 인코딩이라고 한다
      --> &b= 이것또한 인코딩 제외문자


      - 호는 %ED%98%B8 이렇게 인코딩


      ---> 이렇게 인코딩 하는 이유는 주소창 끝에 이렇게 번호를 그대로 표시하면
      ---> 가독성이 높다. 그래서 데이터를 쉽게 볼수가 있다. 그런데 이렇게 인코딩
      ---> 하면 아무래도 가독성이 떨어진다. 이를 위한 목적이가장 크다


      - ajax에서는 비동기 통신을 제공, 그런데 ajax에서는 이와같은 형태로
      - 대부분 인코딩 하지 않고 json으로 파싱해서 보내준다


      --> json 형태는 문자열 형태이다. 즉 ""안에 작성된 형태이다.
      --> 그래서 인코딩을 이렇게 하지않고 그냥간다. 단, 주소창 끝에
      --> 표시하지않고 보이지 않는 영역으로 서버로 전송된다.

      --> 그래서 대부분 요즘에는 ajax의 비동기 통신 방법으로 
      --> json을 사용해서 데이터를 전송한다.

      ---> json에 대해서는 뒤에서 다루겠다.


      ---> 그런데 이 인코딩 방법은 ajax가 나오기전에 동기방법을 썼었다
      ---> 여기서 동기와 비동기를 자세하기 설명하기 좀그렇다

      ---> 간단하게 말하면 web페이지에 id와 password를 입력했다
      ---> 그리고 회원가입 버튼을 클릭하면 서버로 전송된다

      ---> 이때, 동기방법은 서버에서 처리가 끝나서 웹페이지로 돌아올 때까지
      ---> 다른 것을 하나도 처리못한다

      ---> 즉, 웹페이지가 먹통상태가 되어서 웹페이지의 다른버튼을 클릭
      ---> 하더라도 클릭이 안된다

      ---> 반면, 비동기 통신은 같은 방법이라도 서버와 브라우저와 통신하는 사이에도
      ---> 웹페이지의 다른 버튼을 클릭해도 클릭이 작동된다.

      ---> 그래서 비동기 통신 방법이 UI가 굉장히 좋다.
      ---> 아무때라도 다른 처리를 할 수 있기 때문이다.

      -----> 그런 측면에서 요즘의 대부분의 웹페이지는 비동기 통신방법을 사용하고 있다.
      -----> 그렇다고 이렇게 인코딩을 사용하는 것을 아주 안하는 것은 아니니까
      -----> 이런 것이 있다, 주소창에 %ED%98%B8 이런 데이터가 표시되면 아 저것은 인코딩한거구나
      -----> 그정도만 알고 있어도 된다.
      
      -----> encode라는 개념만 알고 있으면 찾아보면 되기 때문이다
      -----> 이때 인코딩 제외문자만 신경쓰면 된다.
  */

  debugger;

  /*
            ===== encodeURIComponent() =====

      - 구분                        - 데이터(값)

      - 파라미터                     - URI
      - 반환                        - 인코딩 결과

      ------------------------------------------

      -- URI를 인코딩 하여 반환
      ----> "; / ? : @ & = + $ ,"를 인코딩 하는 것이
            encodeURI()와 다르다
      
      -- 인코딩 제외 문자를 제외하고
         "%16진수 16진수" 형태로 변환

      -- 인코딩 제외 문자
      -----> 영문자, 숫자
      -----> # - _ . ! ~ * () 따옴표

      --------------------------------------------

      -- 이것은 앞의 encodeURI()와 같다
      -- 다만, 인코딩 제외문자가 적다.

      -- encodeURIComponent() 함수는 인코드 제외문자가 좀 적다
      -- 라고 encodeURI와 비교하면 된다
  */

 console.log('--- encodeURIComponent() ---');
 var uriE = "data?a=번&b=호";
 var encodeC = encodeURIComponent(uriE);
 console.log(encodeC);

 debugger;

 /*
          ===== decodeURI() =====
 
      - 구분                - 데이터(값)

      - 파라미터            - 인코딩 문자열
      - 반환                - 디코딩 결과

      -------------------------------------

      - 인코딩을 디코딩(Decoding)하여 반환

      - 파라미터에 encodeURI()로 인코딩한 문자열 작성
 */

 uri = "data?a=%EB%B2%88&b=%ED%98%B8";
// 앞에서 인코딩한 것을 그대로하면 원래 값이나옴
 console.log(decodeURI(uri));

 debugger;

  /*
          ===== decodeURICompoent() =====
 
      - 구분                - 데이터(값)

      - 파라미터            - 인코딩 문자열
      - 반환                - 디코딩 결과

      -------------------------------------

      - 인코딩을 디코딩(Decoding)하여 반환

      - 파라미터에 encodeURIComponent()로 인코딩한 문자열 작성

      ------------------------------------------------------

      -- decodeURICompoent() 는 decodeURI() 함수와 같다만

      -- 단, encodeURIComponent()로 인코딩한 문자열을 작성한다.

      -- 즉, 인코딩하는 문자가 많다. 그거에대한 차이뿐이다


      ******** encode, decode는 이것에 대한 개념, 그리고 제외하는 문자가 있다! 정도만 알면된다
      ******** 그럼 나머지는 필요할 때 검색해서 사용하면 된다
 */

  console.log('--- decodeURIComponent() ---');
  console.log(decodeURIComponent(encodeC));

  debugger;
}



