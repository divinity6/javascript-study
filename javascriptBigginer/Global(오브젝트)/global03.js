/**
  * 프로그램 설명문서 주석
  * 2021.01.30 수업
  * 
  *      ======= Global 과 window 관계 ========
  * 
  *     - 글로벌과 window 오브젝트 주체
  *     --> 글로벌 오브젝트는 JS가 주체
  *     --> window 오브젝트는 window가 주체
  * 
  *     - 주체는 다르지만,
  *     --> 글로벌 오브젝트의 프로퍼티와 함수가
  *     --> window 오브젝트에 설정된다
  * 
  *     - Global과 window 오브젝트 관계
  *     
  *     - Host 오브젝트 개념 활용
  * 
  *     ------------------------------------
  * 
  *     -- 글로벌 오브젝트는 자바스크립트가 주체이다
  *     -- 즉, 자바스크립트 SPAC에 정의된것.
  * 
  *     -- 반면 window오브젝트는 window가 주체이다
  *     -- 즉, 자바스크립트 SPAC에 정의된것이 아니다
  * 
  *     -- 일반적으로 Number에 속하는 함수와 프로퍼티는
  *     -- 빌트인 Number 오브젝트에 설정되었다.
  * 
  *     -- 거기에 있는것이다. 그런데 글로벌 오브젝트는 실체가 없으므로
  *     -- 글로벌 오브젝트의 함수와 프로퍼티가 어딘가에 저장되어야 하는데
  *     -- 그것이 window 오브젝트에 저장되어 있다. 라는것, 그런 뜻이다.
  * 
  *     -- 따라서 프로퍼티와 함수를 사용하려면 Global오브젝트가 아닌
  *     -- window 오브젝트를 사용해야 한다.
  * 
  */
console.log("=====================================");

window.onload = function() {

  /*
      "use strict"

      1. "use strict" 환경에서는
      -   window.undefined처럼 오브젝트를 사용해야 하며
      -   undefined처럼 프로퍼티 이름만 사용 할 수 없다.

      2. 그래서 주석으로 작성하였다
  
      3. 이에 대해서는 다시 뒤에서 다룬다

      -------------------------------------------------


  */
  debugger;
  
  console.log(undefined);
  console.log(window.undefined);
  // 여기서 window는 window오브젝트다
  
  /*
      1. window 사용에 관계없이 모두 undefined를 출력한다.
  
      2. undefined 앞에 오브젝트를 작성하지 않으면
      -  글로벌 오브젝트에서 undefined를 찾는다

      3. 오른쪽 창의 Global을 전개하면
      -  undefined: undefined가 있으며
      -  iSNaN()도 있다. 

      -----------------------------------------------------

      - Global을 전개해보자. Global이라고 되어있고 오른쪽에 Window라고 되어있는데

      - Global오브젝트는 실체가 없다. 그런데 Global이라고 표시된것은 툴에서 Global이라고 
        표시 한것이라고 생각한다.

      - 그리고 오른쪽에 Window가 있는 것은 Global 오브젝트의 3개의 프로퍼티와 9개의 함수가
        Window 오브젝트에 설정되어있다는 뜻! 그런 뉘앙스가 담겨져있다.

      - Global 안에 있는 것들은 지금 Window 오브젝트 안에 있는 것들이다

      - onClick 등 on어쩌고 하는것들은 DOM이벤트들이다
        이렇게나 많다. 이렇게많은데 Global 오브젝트를 별도로 두지않고 Window 오브젝트에 
        둔다 라는것이 조금 그렇다. 구조적으로...

        그러나 처음 설계할 때부터, 그렇게 만들었기 때문에, 그리고 그때에는 Window 오브젝트에
        메소드들이 많지 않았다

        그런데 지금은 엄청나게 많다.

      - * 따라서 undefined로 값을 구하거나 window.undefined로 값을 구하거나 같다라는 뜻*
          다만 "use strict" 환경이 아닐때는 프로퍼티 이름만 작성하면 global오브젝트의 프로퍼티로
          자바스크립트 엔진이 간주해서 처리해주는 것뿐이다.

          그러나 일반적인 구조에서 본다면 window.undefined를 해주는것이 더 정확하다

          왜냐하면 프로퍼티는 반드시 오브젝트 안에 있어야 하고 '오브젝트.프로퍼티이름' 또는 
          '오브젝트.함수이름' 형태로 불러주는 것이 정확한 표현이다.

          그런데 글로벌 오브젝트가 전체를 통틀어서 하나밖에 없기때문에 이렇게 한것이다.
  */

  debugger;
  /*
      4. 오른쪽 창의 this: window를 전개하면, 끝 부분에
      -  global과 같게 표시된다
  
      5. 글로벌 오브젝트의 프로퍼티와 함수는
      -  window 오브젝트에 설정된다

      6. 따라서 글로벌 오브젝트의 프로퍼티를
      -  window 오브젝트에서 가져올 수 있다.

      --------------------------------------------------

      - 오른쪽 Local의 this : Window를 전개해보겠다.
        이것은 this 키워드로 Window오브젝트를 참조한다는 뜻이다
        
      - Window 오브젝트안에도 쫙있다. 열어보면 앞의 것이랑 똑같다.
        우리가 다루었던 isNaN 혹은 undefined도 여기있다

      - 즉, Global오브젝트의 3개의 프로퍼티와 9개의 함수는 Window오브젝트에
        설정된다는것을 알 수 있다.
  */

  debugger;

  /*
        - 이렇게 Global오브젝트가 없는데도 'Global오브젝트의 프로퍼티와 함수'가
          window오브젝트에 설정될 수있는 개념은 바로 Host 오브젝트 개념이다

        - 브라우저 안에 있는 오브젝트를 자바스크립트에서 마치 내것처럼 쓰는 개념이다

        - 이런 Host 오브젝트 개념이 밑바탕에 깔려있기 때문에 이와같은 처리가 가능한 것이다.

        - 즉, Global오브젝트의 3개의 프로퍼티와 9개의 함수를
          Window오브젝트 에다가 저장할 수가 있는것 그리고 그것을
          Window오브젝트를 통해서 끄집어내서 사용할 수가 있는 것

        - 이러한 개념의 바탕에는 Host 오브젝트가 있다라는 것이다.
  
  */

}



