/**
  * 프로그램 설명문서 주석
  * 2021.02 05 수업
  * 
  *       ===== slice() =====
  * 
  *   - 구분                 - 데이터(값)
  * 
  *   - data                 - 대상
  *   - 파라미터              - 시작 인덱스, 디폴트:0
  *                          - 끝 인덱스 opt, 디폴트: length 
  *   - 반환                  - [결과] 
  * 
  *   ----------------------------------------------------
  * 
  *   -- 배열의 일부를 복사하여 배열로 반환
  *   ----> 첫 번째 파라미터의 인덱스부터 두번째 인덱스 직전까지
  * 
  *   -- true, false를 숫자로 반환
  *   -- 첫 번째 파라미터만 작성
  *   -- 첫 번째 파라미터 값이 클 때
  *   -- 파라미터에 음수 작성
  * 
  *   ------------------------------------------------------
  * 
  *   --> 배열로 반환. 다수를 반환한다는 뉘앙스가 담겨져 있다.
  *   --> 직전! 이것이 함정이다. 이것은 끝인덱스의 디폴트값이 length이기 때문
 */

console.log("=====================================");

window.onload = function() {
  "use strict"

  console.log('--- 시작, 끝 파라미터 모두 작성 ---');

  var origin = [1,2,3,4,5];
  var result = origin.slice(1,3);
  // 1. 1번 인덱스부터 3번 인덱스 직전까지 복사
  //    즉, 1번과 2번을 복사

  // 2. 복사 대상 원본은 바뀌지 않는다
  console.log(result);
  console.log(origin);

  debugger;

  console.log('--- true, false를 숫자로 반환 ---');

  var value = [1,2,3,4,5];
  console.log(value.slice(true,3));
  // true가 1이니깐
  console.log(value.slice(false,3));
  // false가 0이니깐 

  debugger;

  console.log('--- 첫 번째 파라미터만 작성 ---');

  console.log([1,2,3,4,5].slice(2));
  // 1. 첫 번째 파라미터를 작성하고
  //    두 번째를 작성하지 않으면

  // 2. 2번 인덱스부터 끝까지 반환
  //    2번째 인덱스의 디폴트값이 length이기 때문에.
  //    length가 5잖음

  debugger;


  console.log('--- 첫 번째 값 > 두 번째 값 ---');

  console.log([1,2,3,4,5].slice(4,3));
  // 1. 첫 번째 파라미터 값이
  //    두 번째 파라미터 값보다 크면
  // 2. 빈 배열을 반환한다.

  debugger;

  console.log('--- 파라미터 값이 음수 ---');

  value = [1,2,3,4,5];
  console.log(value.slice(-4,-2));
  // 1. 파라미터 값이 음수이면 length 값을 더한다
  //    -4(파라미터값) + 5(length 값) = 1
  //    -2(파라미터값) + 5(length 값) = 3
  // 2. 따라서 slice(1,3)을 실행

  /*
            이런것을 다 외울수는 없다
            그러나 배열의 일부 또는 전부를 복사하여 배열로 반환한다는것은 알아야한다
  */

  debugger;

}



