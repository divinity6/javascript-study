/**
  * 프로그램 설명문서 주석
  * 2021.02 06 수업
  * 
  *       ===== join() =====
  * 
  *     - 구분              - 데이터(값)
  * 
  *     - data              - 기준
  *     - 파라미터           - 분리자 opt, 디폴트 : 콤마(,)
  *     - 반환              - 연결한 문자열
  * 
  *     -------------------------------------------------
  * 
  *     -- 엘리먼트와 분리자를 하나씩 결합하여 문자열로 연결
  *     ----> [0] 인덱스, 분리자, [1] 인덱스, 분리자 형태로 반환
  * 
  *     -- 마지막 엘리먼트는 분리자를 연결하지 않음
  * 
  *     -- 파라미터를 작성하지 않으면 콤마로 분리
  * 
  *     -- 파라미터에 빈 문자열 작성
  * 
  *     ----------------------------------------------------
  * 
  *     -- 분리자작성은 선택이고 작성하지 않으면 콤마가 된다
  * 
  *     -- 디폴트는 콤마(,)이다
  * 
  *     
 */
console.log("=====================================");

window.onload = function() {
  "use strict"

  var value = [1, 2, 3];
  // 마지막 엘리먼트에는 ##을 연결하지 않는다

  var result = value.join("##");

  console.log(result);

  console.log(typeof result);

  debugger;

  value = [1, 2, 3];
  // 배열 오브젝트 생성

  result = value.join();

  console.log(result);
  // 여기에서 콤마는 문자열인 콤마이다(헷갈리면안된다)

  debugger;
  
  console.log('--- 빈 문자열 작성 ---')
  
  result = value.join("");
  // 1. 엘리먼트 값만 연결하여 반환
  // 2. 사용 빈도수가 꽤나 높다
  console.log(result);
  // 3. 데이터로 HTML의 마크업을 만들어 한 번에 표시할 때 사용한다
  //    예) <table>
  
  /*
        이것은 사용 빈도가 높다

        예를 들어 table을 만들 때, 서버에서 데이터를 받아와서 table로 표시를 할때

        서버의 데이터를 마크업으로 만들어서 push를 하는 것이다

        그 후 빈문자열로 작성해서 join을 하게 되면 문자열로 연결된다

        그런다음 한번에 HTML에다 insert를 시키면 HTML에 이전체의 그리드가

        표시된다. 그렇게되면 렌더링을 한번만 할 수 있는 장점이 있다.
   */
  
  debugger;
  
  /*
          ===== toString() =====
  
      - 구분                  - 데이터(값)

      - data                  - 변환 대상
      - 파라미터               - 사용하지 않음
      - 반환                  - 변환한 값

      ---------------------------------------

      -- 배열의 엘리먼트 값을 문자열로 연결
      ----> 콤마로 엘리먼트를 구분

      ---------------------------------------
  */

  console.log('--- 문자열로 연결 ---');
  
  result = ["A", "B", "C"].toString();

  console.log(result);
  console.log([["가"],["다"]].toString());
  // 1. 2차원 배열의 각 엘리먼트 값을 1차원 배열로 펼치고
  // 2. 다시 1차원을 문자열로 연결하여 반환

  /*
       ["A", "B", "C"]로 배열 오브젝트를 만들고 메소드 체인으로 toString 메소드를 호출하면서
       파라미터를 작성하지 않았다.
       그럼 A,B,C가 연결되어서 문자열로 출력된다
  
      또한 2차원배열을 작성하고 toString메소드를 호출하면서 파라미터를 작성하지 않았다

      그러면 가와 다가 나온다
  */
  debugger;

  /*
            ===== toLocaleString() =====
  
        - 구분                  - 데이터(값)

        - data                  - 변환 대상
        - 파라미터               - 사용하지 않음
        - 반환                   - 변환한 값

        ---------------------------------------

        -- 엘리먼트 값을 지역화 문자로 변환
        ----> 문자열을 콤마로 연결하여 반환
      
        -------------------------------------------

        toString()과 다른점은 지역화 문자로 변환한다는 것
  */
 console.log('--- 지역화 문자로 변환 ---');

  var value2 = [12.34, 56];

  console.log(value2.toLocaleString("zh-Hans-CN-u-nu-hanidec"));




  debugger;



}



