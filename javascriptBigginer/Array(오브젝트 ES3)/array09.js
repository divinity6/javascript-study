/**
  * 프로그램 설명문서 주석
  * 2021.02 07 수업
  * 
  *       ===== sort() =====
  * 
  *     - 구분                 - 데이터(값)
  * 
  *     - data                 - 대상
  *     - 파라미터              - 함수opt
  *     - 반환                 - sort 결과
  * 
  *     ---------------------------------------
  * 
  *     -- 엘리먼트 값을 승순으로 정렬
  *     ----> 여기서 승순이란 작은수 부터 큰순으로 정렬하는것
  *     
  *     -- 정렬 기준은 엘리먼트 값의 Unicode
  * 
  *     ----> 코드 포인트가 작으면 앞에 오고 크면 뒤에 온다.
  * 
  *     -- 주의 : sort 대상 배열도 정렬된다
  * 
  *     -- 값이 undefined이면 끝으로 이동한다
  * 
 */
console.log("=====================================");

window.onload = function() {
  "use strict"

  console.log(window);

  var value = [4, 3, 2, 1];
  // 작은 값이 앞에오고 큰값이 뒤로가는것
  // 가,나,다 순이라고도 한다

  // 정렬하는 기준은 엘리먼트 값의 Unicode순이다

  console.log(value.sort());

  debugger;

  console.log('--- Unicode 순서 ---')

  value = ["A1","A01", "B2", "B02"];
  // 1. 왼쪽에서 오른쪽으로 문자 하나씩 비교하여 정렬

  // 2. A01과 A1에서 A가 같으므로 다음 문자 비교

  // 3. 0과 1을 비교하게 되며 0이 1보다 코드 포인트가
  //    앞에 있으므로 앞에 정렬
  console.log(value.sort());

  /*
    이때 앞에서 이미 작고 큰것이 판명이 나면 뒤의 것은 비교하지 않는다
  */



  debugger;

  console.log('--- sort 대상도 sort됨 ---')

  value = [4 , 3, 2, 1];
  console.log(value.sort());
  console.log(value);
  /*
        그런데 생성한 배열오브젝트 자체도 정렬되어 출력된다

        즉, sort대상 데이터도 정렬이된다

        따라서 sort 대상 데이터가 정렬이 되면 안되는 경우에는 사전에 복사를 해두어야 한다
  */

  debugger;

  console.log('--- 값이 undefined면 끝으로 이동 ---')

  value = [ , , 2, 1];
  console.log(value.sort());
  console.log(value);

  /*
    그렇다고 undefined가 1보다 크다는 것은 아니다
    undefined니깐 뒤로 이동시키는 것
  */

  value = [101 , 26, 7, 1234];
  // 1. 사람이 생각하는 일반적인 정렬은 [7, 26 ,101, 1234]이다
  console.log(value.sort());

  // 2. [실행 결과]처럼 정렬된 것은 코드 포인트로 비교하여 sort 하기 때문

  // 3. 101과 26에서 1이 2보다 작으므로 101이 26보다 작은 것으로 정렬

  // 4. 또한 101과 7에서 1이 7보다 작으므로 101이 7보다 작은 것으로 정렬

  // 5. 이를 해결하려면 sort()의 파라미터에 함수를 작성하고(콜백 함수) 함수에서 정렬해야 한다

  // 6. 다음 절에서 알고리즘을 다룬다


}



