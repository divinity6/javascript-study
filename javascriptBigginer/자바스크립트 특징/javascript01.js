/**
  * 프로그램 설명문서 주석
  * 2021.02 20 수업
  * 
  *         ===== 자바스크립트 특징 =====
  * 
  *     - 자바스크립트는 스크립팅(Scripting) 언어
  * 
  *     - 스크립팅 언어 특징
  *     ----> 소스 파일의 코드를 사전에 컴파일하여
  *           실행 파일을 만들어 놓지 않고
  * 
  *     ----> 사용하는 시점에 컴파일하고 실행
  * 
  *     ----> 장점을 활용하는 지혜 필요
  * 
  *     - 컴파일 순서
  *     ----> 소스 파일의 위에서부터 아래로 컴파일
  *     ----> function 키워드를 만나면
  *           function 오브젝트를 생성
  *     
  *     ----> 이때, 함수 안의 코드는 컴파일하지 않음
  *           함수가 호출되었을 때, 위의 방법으로 컴파일
  * 
 */
console.log("=====================================");

window.onload = function() {
    "use strict"
    // console.log 사용
    var log = function( value , key ){
        if ( key === "note") {
            console.log('--- ' + value +' ---');
        } else { console.log(value); }
    };

    log('book,js파일','note');

    var value = 123;
    var book = function(){
        var point = 456;
        var getPoint = function(){
            return point;
        };
        getPoint();
    };
    book();

    /*
            ====================================================================

            @자바스크립트 언어의 특징()

            - 위의 코드를 book.js 파일에 작성된 코드라고 보겠다.

            - 자바스크립트는 html파일의 script 엘리먼트의 src 속성의
              book.js를 작성한다

            - 그리고 html파일이 렌더링하면서 src 속성에 작성된 book.js 파일을
              서버에서 가져와서 그때 컴파일한다. "그 때"
              그리고 필요하면 그때 일부를 실행한다.

            - 그런데 이런면도있다

            ------------------------------------------------------------

            예를 들어 java나 c++ 같은 경우는 사전에 컴파일한다. 
            
            그리고 컴파일할때 문법체크같은걸 다한다 그리고 exe인 실행파일을 만들어논다.

            그리고 실행할때는 exe를 불러온다. 그러니 컴파일 시간이 안걸린다.

            ===== 그런데 자바스크립트는 사용하는 시점에 컴파일도 하고 그리고 실행도 한다

            ===== 그러면 사용자가 컴파일하는 시간만큼 기다려야하는것 아니냐하는 이야기

            ----> 이것을 단점이라고 이야기할 수 있었다.
                  물론 맞는말이다. 10년이나 20년전에는 이 컴파일하는 시간이 부담이 됐었다
                  그러나 그때는 상대적으로 프로그램이 짧았다
            
                  지금은 경험으로 비추어보면 컴파일하는 시간은 걸리지 않는다

            ----> 그리고 일반적으로 3000라인안에서 애플리케이션이 돌아간다

            --------------------------------------------------------------------

            ----> 그러나 장점도존재한다

            ----> 컴파일 된 것들은 안의 내용을 바꿀 수 없다
                  그러나 자바스크립트는 컴파일하기 전에만 코드를 바꾸면 된다.
                  그래서 임의적으로 코드를 추가하거나 바꾸거나 할 수 있다.

            ----> 이것을 잘 활용하면 굉장히 유용하게 사용 할 수 있다.

            ==== 그래서 장점을 활용하는 지혜가 필요하다.

            ======================================================================

            @컴파일 순서

            - 소스 파일의 위에서부터 아래로 컴파일 한다

            - 그리고 function 키워드를 만나면 built-in Function 오브젝트로 그때
              오브젝트를 만든다.

            - 그때 book안의 코드는 컴파일 하지 않는다.

            - 이것이 굉장히 좋은 것이다

            ----> 왜냐하면 이러한 경우가 있다.
                  회원가입 메뉴가 있다. 회원 가입은 회원가입 할때만 필요한 것이다.

                  그리고 한번 가입하면 버튼을 그 이후에 누를 일이 없다.

                  그러면 사전에 사전에 컴파일하는 언어들은 회원가입을 하든 안하든
                  무조건 적으로 컴파일된 상태를 가져온다. 그러면 필요하지 않는것이

                  그안에 들어가 있다라는 뜻.

                  그런데 우리는 그 버튼을 눌렀을 때만 그안의 함수 코드를 컴파일 한다
                  그전에는 그냥 안의 코드는 텍스트였다.

                  따라서 어떤면에서 본다면, 이와같은 케이스로 본다면 컴파일 하지않는것이

                  "더 좋다" 라는 것이다.

                  ----> 왜냐하면 회원가입 할때는 많은 코드들이 동반될텐데
                        그거 다 컴파일 할 이유는 없는 것이다.

                        컴파일 했다는 이야기는 기계어로 번역했다는 이야기니까.

                        그럼 메모리를 그만큼 차지한다는 이야기.

                  ----> 그런 관점에서 본다면 스크립팅 언어의 장점도 있다. 라는 이야기

            ======================================================================
    */

    debugger;

    /*
                ===== JS와 객체지향 =====

            - 객체 지향 프로그래밍 언어
            ----> OOP: Object Oriented Programming

            - 자바스크립트는 객체 지향 언어
            ----> ES5 스펙에 기술되어 있음

            - 자바스크립트 OOP 구현
            ----> 다른 언어의 OOP 구현과 차이가 있으므로
                  비교하는 것은 의미가 없다

            ----> JS 특징이 반영된 OOP 구현



        -----------------------------------------------------

        - 객체 지향은 주제가 좀 무겁다
        - 객체지향 프로그래밍 언어는 OOP라고 부른다(너무 길자늠)

        - 스펙에서는 ECMA라고 쓴다. 그리고 일반적으로는 javascript라고 부른다.
        - 좀더 기술적으로 다가가겠다는 뉘앙스.

        - 좀더 개념이 쌓이면 객체지향이라는 개념에 대해서도 이해할 필요가 있다.


        - 자바스크립트의 OOP 구현은 다른언어의 OOP구현과 차이가 있으므로 
          비교하는것은 의미가 없다.

        - OOP는 개념적인 이야기다. 그래서 언어마다 이것을 가지고 구현하는 방법이 다르다.

        - 그런데 다른언어와 같이 비교한다? 안된다.
        - 왜냐면 자바스크립트는 특별한 방법을 사용하고 있기 때문이다.
          (일반적인 어떤 다른언어와 차이가 있다.)
    
        ------------------------------------------------------------------
    */

    debugger;

    /*
    
                ===== OOP의 객체 =====
    
        - 강좌에 필요한 것만 간략하게 다룬다

        - 객체( Object )

        --> 개념적 접근( 실체가 없는것 )

        --> 행위(Behavior)와 속성(Attribute)으로 구성
        --> 행위: 먹다, 마시다
        --> 속성: 밥, 사이다

        -------------------------------------------------

        지금까지 객체라는 말을 못쓴것은 위의 것 때문에 그렇다

        위에서말하는 객체는 개념적인것이다

        행위는 먹다, 마시다와 같이 동사이다

        그리고 속성은 밥, 사이다 처럼 명사다
        
        ======================================================

        - 객체를 형상화하면

        --> 행위가 메소드가 되고
        --> 속성이 프로퍼티가 된다
        --> 객체가 "클래스"로 된다

        - 클래스(Class)
        --> 행위와 속성을 정의한 것으로
        --> 인스턴스로 생성하여 프로그램에서 사용한다.

        ---------------------------------------------------------

        - 행위가 메소드가된다. 함수가 될수도있다
          속성이 프로퍼티가 된다. 변수가 될수도 있다

        - 그리고 이것을 포함한 객체가 클래스가 된다.
          그래서 클래스안에 메소드와 프로퍼티가 있는 형태가 되는것이다.

        - 클래스는 행위와 속성을 정의한 것.
          이상태까지는 텍스트이다.

        - 그리고 클래스는 반드시 new 연산자를 사용해서 인스턴스를 생성해서
          프로그램에서 사용 할 수 있다.

        === 이것이 함수와 메소드와의 차이이다. ===

        ==== 클래스는 반드시 인스턴스로 만들어야 한다.(new 연산자로) ====
    */







}