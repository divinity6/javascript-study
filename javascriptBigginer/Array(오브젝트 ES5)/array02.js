/**
  * 프로그램 설명문서 주석
  * 2021.02 10 수업
  * 
  *           ===== indexOf() =====
  * 
  *       - 구분                  - 데이터(값)
  * 
  *       - data                  - 검색대상
  *       - 파라미터              - 검색할 값
  *                              - 검색 시작 인덱스, 디폴트 :0
  *       - 반환                 - 검색된 인덱스
  * 
  *       ----------------------------------------------------
  * 
  *       -- 파라미터 값과 같은 엘리먼트의 인덱스 반환
  *       ----> 왼쪽에서 오른쪽으로 검색
  *       ----> 값이 같은 엘리먼트가 있으면 검색 종료
  *       ----> 데이터 타입까지 체크
  * 
  *       -- 두번째 파라미터의 인덱스부터 검색
  * 
  *       -- String과 Array의 indexOf()차이
  * 
 */
console.log("=====================================");

window.onload = function() {
  "use strict"

  var value = [1, 2, 5, 2, 5];
  // 1. 배열의 왼쪽부터 5를 검색
  //    앞에서 5가 검색되니 뒤으것은 검색하지 않는다
  console.log(value.indexOf(5));
  // 2. 2번 인덱스에 5가 있으므로 2를 반환
  
  debugger;

  value = [1, 2, 5, 2, 5];
  // 1. 배열의 왼쪽부터 5를 검색
  // 2. 2번과 4번 인덱스에 5가 있지만 타입이 다르다
  console.log(value.indexOf("5"));
  // 3. 같은 값이 없으면 -1을 반환 한다

  /*
    위의 두개는 두번째 파라미터의 디폴트 값은 0이다
  */
  debugger;
  
  console.log('--- 두 번째 파라미터 작성 ---');
  
  value = [1, 2, 5, 2, 5];
  // 1. 3번 인덱스부터 5를 검색
  console.log(value.indexOf(5,3));
  // 2. 2번 인덱스에 5가 있지만
  //    3번 인덱스부터 검색하므로 4가 반환된다

  debugger;

  console.log('--- String과 Array의 indexOf()차이 ---');
  // 1. 두 번째 파라미터에 음수를 작성했을 때 검색 방법이 다르다

  console.log("ABCBC".indexOf("C",-2));
  // 2. String 오브젝트는 0으로 간주하여 처음부터 검색
  //    ABCBC에서 C가 2번 인덱스에 있으므로 2를 반환 
  var list = ["A","B","C","B","C"];
  // 3. Array 오브젝트는 음수에 length를 더해
  //    시작 인덱스로 사용 -2 + length(5) = 3

  console.log(list.indexOf("C", -2));
  //    2번 인덱스에 C가 있지만 4번 인덱스를 반환

  debugger;

  /*
            ====== lastIndexOf() =====

      - 구분                  - 데이터(값)

      - data                  - 검색 대상
      - 파라미터               - 검색할 값
                              - 검색 시작 인덱스 opt
      - 반환                  - 검색된 인덱스

      -----------------------------------------------

      -- 파라미터 값과 같은 엘리먼트의
      ----> 마지막 인덱스 반환
      ----> 다른 처리 방법은 indexOf()와 같음

      -------------------------------------------------
      
      같은 것이 있더라도 마지막까지 간다
  
  */

  console.log('--- lastIndexOf() ---')
  value = [1, 2, 5, 2, 5];
  
  console.log(value.lastIndexOf(5,4));
  // 뒤에서부터 앞으로 검색함
  debugger;
  /*
      - 그런데 사전적 의미에서 last가 마지막이다

        그렇지만 메소드를 처리하는 알고리즘 측면에서 본다면

        왼쪽에서 오른쪽으로 비교하는 것이아닌 오른쪽에서 왼쪽으로 비교하겠다

        왜냐하면 중간에 5가있어도 끝까지 가봐야한다. 그래야 5가있는지 알수있으니까

        그러나 오른쪽에서 왼쪽으로 비교하면 한번에 알 수 있다


        -----------------------------------------------------------------------

        그래서 lastIndexOf()라는 사전적인 측면에서 본다면 마지막인덱스 개념이 되지만

        오른쪽에서 왼쪽으로 검색한다는 표현이 더 적절하다. 뒤에서 앞으로 검색한다
  */

}



