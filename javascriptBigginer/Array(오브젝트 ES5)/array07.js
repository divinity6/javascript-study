/**
  * 프로그램 설명문서 주석
  * 2021.02 20 수업
  * 
  *     ===== reduce() =====
  * 
  *     - 구분              - 데이터(값)
  * 
  *     - data              - 반복 대상
  *     - 파라미터          - 콜백 함수
  *                         - 초깃값 opt
  *     - 반환              - 콜백 함수에서 반환한 값
  * 
  *     --------------------------------------------
  * 
  *     -- forEach() 처럼 시멘틱 접근
  *     -- 배열 끝까지 콜백 함수 호출
  *     ----> 파라미터 작성 여부에 따라 처리가 다름
 */
console.log("=====================================");

window.onload = function() {
  // console.log 사용
  var log = function(string){
    console.log('--- ' + string +' ---')
  };

  "use strict"
  /*
        1.
        ===== reduce() =====

        - 콜백 함수만 작성한 경우
        --> 즉, 파라미터를 하나만 작성

        - 처음 콜백 함수를 호출할 때
        --> 인덱스[0]의 값을 직전 값에 설정
        --> 인덱스[1]의 값을 현재 값에 설정
        --> 인덱스에 1을 설정

        - 두 번째로 콜백 함수를 호출할 때
        --> 콜백 함수에서 반환된 값을 직전 값에 설정
        --> 인덱스[2]의 값을 현재 값에 설정
  
  */

  var value = [ 1 , 3 , 5 , 7 ];
  var fn = function( prev , curr , index , all ) {
    console.log( prev + "," + curr );
    return prev + curr;
  };
  // 1. 4번이 아니라 3번 반복한 것은
  //    처음 시작할 때 인덱스가 1이기 때문이다.

  var result = value.reduce(fn);
  console.log("결과:" , result);


  /*
      1이 prev에 3이 curr에 들어간다.

      즉, 2개가 한꺼번에 설정되는 것이다

      그리고 콜백함수의 파라미터는 4개이다

      3의 인덱스인 1이 index에 설정되고

      all에 전체가 설정된다

      -- 이것이 reduce 메소드의 특징이다.

      -- 엘리먼트 값이 2개 설정된다는 것이다.

      -----------------------------------------------

      prev 와 curr을 더하면 1 + 3이 되므로 4가된다

      그리고 reduce 메소드는 다음 콜백함수를 호출할때

      4를 파라미터 값으로 넘겨준다 그럼 prev에 4가 설정되고

      5가 current에 설정된다

      그리고 이때 인덱스는 2이다.


      ---------------------------------------------------


      reduce() 메소드는 위와같이 4개의 파라미터를 가지며 reduce 메소드의 첫번째

      파라미터만 작성하고 두번째 파라미터를 작성하지 않으면 2개의 엘리먼트가

      한꺼번에 설정된다.

      따라서 length가 4이지만 3번을 반복하게 된다.
  
  */
  debugger;
  /*
        2.
        ===== reduce() =====

        - 두 번째 파라미터를 작성한 경우

        - 처음 콜백 함수를 호출할 때
        --> 두 번째 파라미터 값을 직전 값에 설정
        --> 인덱스[0]의 값을 현재 값에 설정
        --> 인덱스에 0을 설정

        - 두 번째로 콜백 함수를 호출할 때
        --> 콜백 함수에서 반환된 값을 직전 값에 설정
        --> 인덱스[1]의 값을 현재 값에 설정
  
  
  */

  console.log('--- 두 번째 파라미터 작성 ---');

  value = [ 1 , 3 , 5 ];
  fn = function( prev , curr , index , all ){
    console.log( prev + "," + curr );
    return prev + curr;
  };
  // 1. 두 번째 파라미터에 초깃값으로 7을 작성

  // 2. 처음 콜백 함수를 호출할 때
  //    두 번째 파라미터 값 7을 prev에 설정
  //    prev: 7, curr: 1, index: 0 반환값: 8

  // 3. 두 번째 콜백 함수를 호출할 때
  //    prev: 8, curr: 3, index: 1, 반환값: 11

  result = value.reduce( fn , 7 );
  console.log( "반환 : " , result );
  console.log( "전체 : " , value );

  /*
      두 번째 파라미터를 작성하면 처음 호출할 때 파라미터 값으로 넘겨주게 된다

      즉, 초기 값으로 사용하는 것이다
  */

  debugger;

  /*
          ===== reduceRight() =====
  
          - 구분              - 데이터(값)

          - data              - 반복 대상
          - 파라미터           - 콜백 함수
                              - 초깃값 opt
          - 반환              - 콜백 함수에서 반환한 값

          -------------------------------------------

          - reduce()와 처리 방법 같음
          - 배열 끝에서 앞으로 하나씩 읽어가면서
          --> 콜백 함수에서 반환한 값을 반환
  */

  // console.log('--- 배열 끝에서 앞으로 처리 ---');
  log('배열 끝에서 앞으로 처리');

  value = [ 1 , 3 , 5 , 7 ];
  fn = function( prev , curr , index , all ) {
    console.log( prev + "," + curr );
    return prev + curr;
  };

  result = value.reduceRight( fn );
  console.log(result);

  debugger;
  

}



